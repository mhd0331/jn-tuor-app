Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Íµ¨ÌòÑ ÏôÑÎ£å
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±ÏùÑ ÏúÑÌïú ÏôÑÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Íµ¨Ï°∞Î•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî ÌäπÏßïÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
üìä Íµ¨ÌòÑÎêú Ï£ºÏöî Í∏∞Îä•
1.	14Í∞ú ÌïµÏã¨ ÌÖåÏù¥Î∏î 
o	Users (ÏÇ¨Ïö©Ïûê)
o	Stores (ÏÉÅÏ†ê)
o	Menus (Î©îÎâ¥)
o	Reservations (ÏòàÏïΩ)
o	Reviews (Î¶¨Î∑∞)
o	Í∏∞ÌÉÄ ÏßÄÏõê ÌÖåÏù¥Î∏î
2.	Í≥†Í∏â Í∏∞Îä• 
o	PostGISÎ•º ÌôúÏö©Ìïú ÏúÑÏπò Í∏∞Î∞ò Í≤ÄÏÉâ
o	Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Í≤ÄÏÉâ (ÌïúÍ∏Ä ÏßÄÏõê)
o	Row Level Security (Î≥¥Ïïà)
o	ÏûêÎèô slug ÏÉùÏÑ±
o	Í∞êÏÇ¨ Î°úÍ∑∏ ÏãúÏä§ÌÖú
3.	ÏÑ±Îä• ÏµúÏ†ÅÌôî 
o	Î≥µÌï© Ïù∏Îç±Ïä§ Ï†ÑÎûµ
o	Ìä∏Î¶¨Í±∞ Í∏∞Î∞ò ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
o	Î∑∞Î•º ÌÜµÌïú ÏøºÎ¶¨ ÏµúÏ†ÅÌôî
4.	ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏãúÏä§ÌÖú 
o	Knex.js Í∏∞Î∞ò ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
o	Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ Í∞ÄÎä•
o	Î°§Î∞± ÏßÄÏõê
üöÄ Îã§Ïùå Îã®Í≥Ñ
1.	Î°úÏª¨ ÌôòÍ≤ΩÏóêÏÑú ÌÖåÏä§Ìä∏ 
bash
# PostgreSQL ÏÑ§Ïπò ÌõÑ
npm install
npm run db:setup
2.	ÌôïÏù∏ ÏÇ¨Ìï≠ 
o	PostgreSQL 15+ ÏÑ§Ïπò Ïó¨Î∂Ä
o	PostGIS ÌôïÏû• Î™®Îìà ÏÑ§Ïπò
o	ÎÑ§Ïù¥Î≤Ñ ÌÅ¥ÎùºÏö∞Îìú ÌîåÎû´Ìèº DB Ïù∏Ïä§ÌÑ¥Ïä§ Ï§ÄÎπÑ
3.	Ï∂îÍ∞Ä Í≥†Î†§ÏÇ¨Ìï≠ 
o	Î∞±ÏóÖ Ï†ÑÎûµ ÏàòÎ¶Ω
o	Î™®ÎãàÌÑ∞ÎßÅ ÎèÑÍµ¨ ÏÑ§Ï†ï
o	Ïù∏Îç±Ïä§ ÏÑ±Îä• ÌäúÎãù
Îã§ÏùåÏúºÎ°ú Ïñ¥Îñ§ Î™®ÎìàÏùÑ Íµ¨ÌòÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?
‚Ä¢	Î∞±ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞ Î∞è API ÏÑ§Í≥Ñ (Ï∂îÏ≤ú)
‚Ä¢	Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÌÜµÌï©
‚Ä¢	ÏÉÅÏ†ê CRUD API


‚ÄÉ
Î∞±ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞ Î∞è API ÏÑ§Í≥Ñ ÏôÑÎ£å
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±ÏùÑ ÏúÑÌïú ÌôïÏû• Í∞ÄÎä•ÌïòÍ≥† ÏïàÏ†ÑÌïú Î∞±ÏóîÎìú Íµ¨Ï°∞Î•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§.
üèóÔ∏è Íµ¨ÌòÑÎêú Ï£ºÏöî Í∏∞Îä•
1. ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞
‚Ä¢	Î™®ÎìàÌôîÎêú ÏïÑÌÇ§ÌÖçÏ≤ò: Ïª®Ìä∏Î°§Îü¨, ÏÑúÎπÑÏä§, ÎùºÏö∞Ìä∏ Î∂ÑÎ¶¨
‚Ä¢	TypeScript: ÌÉÄÏûÖ ÏïàÏ†ïÏÑ±Í≥º Í∞úÎ∞ú ÏÉùÏÇ∞ÏÑ± Ìñ•ÏÉÅ
‚Ä¢	ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ÄÏ¶ù: JoiÎ•º ÌÜµÌïú ÏÑ§Ï†ï Í≤ÄÏ¶ù
2. ÌïµÏã¨ ÎØ∏Îì§Ïõ®Ïñ¥
‚Ä¢	Ïù∏Ï¶ù/Ïù∏Í∞Ä: JWT Í∏∞Î∞ò Ïù∏Ï¶ù, Ïó≠Ìï† Í∏∞Î∞ò Í∂åÌïú Í¥ÄÎ¶¨
‚Ä¢	Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨: Joi Ïä§ÌÇ§Îßà Í∏∞Î∞ò ÏûÖÎ†• Í≤ÄÏ¶ù
‚Ä¢	ÏóêÎü¨ Ï≤òÎ¶¨: Ï§ëÏïôÌôîÎêú ÏóêÎü¨ Ìï∏Îì§ÎßÅ
‚Ä¢	Î≥¥Ïïà: Helmet, CORS, Rate Limiting
3. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
‚Ä¢	Knex.js: SQL ÏøºÎ¶¨ ÎπåÎçî Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
‚Ä¢	Ïó∞Í≤∞ ÌíÄÎßÅ: Ìö®Ïú®Ï†ÅÏù∏ DB Ïó∞Í≤∞ Í¥ÄÎ¶¨
‚Ä¢	Ìä∏ÎûúÏû≠ÏÖò: Îç∞Ïù¥ÌÑ∞ ÏùºÍ¥ÄÏÑ± Î≥¥Ïû•
4. Ï∫êÏã± ÏãúÏä§ÌÖú
‚Ä¢	Redis ÌÜµÌï©: ÏÑ±Îä• ÏµúÏ†ÅÌôî
‚Ä¢	Ï∫êÏãú Î¨¥Ìö®Ìôî: ÏûêÎèô Ï∫êÏãú Í¥ÄÎ¶¨
‚Ä¢	ÏÑ∏ÏÖò Ï†ÄÏû•ÏÜå: ÌôïÏû• Í∞ÄÎä•Ìïú ÏÑ∏ÏÖò Í¥ÄÎ¶¨
5. API ÏÑ§Í≥Ñ
‚Ä¢	RESTful ÏõêÏπô: ÏßÅÍ¥ÄÏ†ÅÏù∏ ÏóîÎìúÌè¨Ïù∏Ìä∏
‚Ä¢	ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò: ÎåÄÏö©Îüâ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
‚Ä¢	Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ÎßÅ: Ïú†Ïó∞Ìïú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
üìÅ ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞
src/
‚îú‚îÄ‚îÄ config/          # ÌôòÍ≤ΩÏÑ§Ï†ï
‚îú‚îÄ‚îÄ controllers/     # ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ
‚îú‚îÄ‚îÄ database/        # DB Ïó∞Í≤∞ Î∞è ÏøºÎ¶¨
‚îú‚îÄ‚îÄ middlewares/     # Express ÎØ∏Îì§Ïõ®Ïñ¥
‚îú‚îÄ‚îÄ routes/          # API ÎùºÏö∞Ìä∏ Ï†ïÏùò
‚îú‚îÄ‚îÄ services/        # Ïô∏Î∂Ä ÏÑúÎπÑÏä§ Ïó∞Îèô
‚îú‚îÄ‚îÄ utils/           # Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
‚îú‚îÄ‚îÄ types/           # TypeScript ÌÉÄÏûÖ
‚îî‚îÄ‚îÄ server.ts        # Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏßÑÏûÖÏ†ê
üöÄ Îã§Ïùå Îã®Í≥Ñ
Ï¶âÏãú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í∏∞Îä•:
1.	ÌôòÍ≤Ω ÏÑ§Ï†ï 
bash
npm install
cp .env.example .env
# .env ÌååÏùº ÏàòÏ†ï
2.	Í∞úÎ∞ú ÏÑúÎ≤Ñ Ïã§Ìñâ 
bash
npm run dev
3.	API ÌÖåÏä§Ìä∏ 
o	GET /health - ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏
o	GET /api/v1/stores - ÏÉÅÏ†ê Î™©Î°ù Ï°∞Ìöå
üîß Ï∂îÍ∞Ä Íµ¨ÌòÑ ÌïÑÏöî Ìï≠Î™©
Îã§Ïùå Ï§ë Ïñ¥Îñ§ Î∂ÄÎ∂ÑÏùÑ Íµ¨ÌòÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?
1.	Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÌÜµÌï© (Ï∂îÏ≤ú) 
o	OAuth ÌîåÎ°úÏö∞ Íµ¨ÌòÑ
o	ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨
o	ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ïó∞Îèô
2.	Î©îÎâ¥ CRUD API 
o	Î©îÎâ¥ Í¥ÄÎ¶¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
o	Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
o	ÏòµÏÖò Í¥ÄÎ¶¨
3.	ÏòàÏïΩ ÏãúÏä§ÌÖú API 
o	ÏòàÏïΩ ÏÉùÏÑ±/Ï°∞Ìöå/Ï∑®ÏÜå
o	ÏïåÎ¶º Î∞úÏÜ°
o	ÏÉÅÌÉú Í¥ÄÎ¶¨
4.	ÌååÏùº ÏóÖÎ°úÎìú (S3) 
o	Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÎØ∏Îì§Ïõ®Ïñ¥
o	Î¶¨ÏÇ¨Ïù¥Ïßï Î∞è ÏµúÏ†ÅÌôî
o	CDN Ïó∞Îèô
Î∞±ÏóîÎìú Íµ¨Ï°∞Í∞Ä Ï§ÄÎπÑÎêòÏóàÏúºÎãà, Ïù¥Ï†ú Ïã§Ï†ú Í∏∞Îä•ÏùÑ Íµ¨ÌòÑÌï† Ï∞®Î°ÄÏûÖÎãàÎã§. Ïñ¥Îñ§ Î™®ÎìàÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?
Ïû¨ÏãúÎèÑ
ClaudeÎäî Ïã§ÏàòÎ•º Ìï† Ïàò ÏûàÏäµÎãàÎã§. 
ÏùëÎãµÏùÑ Î∞òÎìúÏãú Îã§Ïãú ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.
‚ÄÉ
Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÌÜµÌï©ÏùÑ ÏúÑÌïú ÏôÑÏ†ÑÌïú Íµ¨ÌòÑ ÏΩîÎìúÎ•º Ï†úÍ≥µÌñàÏäµÎãàÎã§. Î∞±ÏóîÎìúÏôÄ ÌîÑÎ°†Ìä∏ÏóîÎìú Î™®Îëê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.
Ï£ºÏöî Íµ¨ÌòÑ ÎÇ¥Ïö©
Î∞±ÏóîÎìú (Node.js + Express + TypeScript)
1.	Ïπ¥Ïπ¥Ïò§ OAuth ÌîåÎ°úÏö∞ Íµ¨ÌòÑ 
o	Ïù∏Í∞Ä ÏΩîÎìú ‚Üí Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÍµêÌôò
o	ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
o	ÏûêÎèô ÌöåÏõêÍ∞ÄÏûÖ/Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
2.	JWT ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨ 
o	Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ (7Ïùº)
o	Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ (30Ïùº)
o	RedisÎ•º ÌÜµÌïú ÌÜ†ÌÅ∞ Ï†ÄÏû•/Í¥ÄÎ¶¨
3.	Î≥¥Ïïà Í∏∞Îä• 
o	ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã†
o	Ïπ¥Ïπ¥Ïò§ ÌÜ†ÌÅ∞ Í∞±Ïã†
o	ÌöåÏõê ÌÉàÌá¥ Ïãú Ïπ¥Ïπ¥Ïò§ Ïó∞Í≤∞ ÎÅäÍ∏∞
ÌîÑÎ°†Ìä∏ÏóîÎìú (Next.js + React + TypeScript)
1.	Ïù∏Ï¶ù ÏÉÅÌÉú Í¥ÄÎ¶¨ 
o	Context APIÎ•º ÌÜµÌïú Ï†ÑÏó≠ ÏÉÅÌÉú Í¥ÄÎ¶¨
o	ÏûêÎèô ÌÜ†ÌÅ∞ Í∞±Ïã† (401 ÏóêÎü¨ Ïãú)
o	localStorage Í∏∞Î∞ò ÌÜ†ÌÅ∞ Ï†ÄÏû•
2.	Ïª¥Ìè¨ÎÑåÌä∏ 
o	Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
o	Î≥¥Ìò∏Îêú ÎùºÏö∞Ìä∏ (ProtectedRoute)
o	ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨
3.	ÏÇ¨Ïö©Ïûê Í≤ΩÌóò 
o	Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ïú†ÏßÄ
o	Ïã†Í∑ú ÏÇ¨Ïö©Ïûê Ïò®Î≥¥Îî©
o	Î°úÍ∑∏ÏïÑÏõÉ/ÌÉàÌá¥ Í∏∞Îä•
ÏÑ§Ï†ï Î∞©Î≤ï
1. Ïπ¥Ïπ¥Ïò§ Í∞úÎ∞úÏûê ÏÑ§Ï†ï
1.	Ïπ¥Ïπ¥Ïò§ Í∞úÎ∞úÏûê ÏÇ¨Ïù¥Ìä∏ Ï†ëÏÜç
2.	Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉùÏÑ±
3.	ÌîåÎû´Ìèº ÏÑ§Ï†ïÏóêÏÑú Web ÌîåÎû´Ìèº Îì±Î°ù
4.	Redirect URI ÏÑ§Ï†ï: http://localhost:3000/api/v1/auth/kakao/callback
5.	Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÌôúÏÑ±Ìôî
6.	ÎèôÏùò Ìï≠Î™© ÏÑ§Ï†ï (ÎãâÎÑ§ÏûÑ, ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ, Ïù¥Î©îÏùº)
2. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
bash
# .env (Î∞±ÏóîÎìú)
KAKAO_CLIENT_ID=your_rest_api_key
KAKAO_CLIENT_SECRET=your_client_secret
KAKAO_REDIRECT_URI=http://localhost:3000/api/v1/auth/kakao/callback
KAKAO_ADMIN_KEY=your_admin_key

JWT_SECRET=your_jwt_secret_key
JWT_REFRESH_SECRET=your_jwt_refresh_secret_key

# .env.local (ÌîÑÎ°†Ìä∏ÏóîÎìú)
NEXT_PUBLIC_API_URL=http://localhost:3000/api/v1
3. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
sql
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    kakao_id VARCHAR(255) UNIQUE,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(255),
    phone_number VARCHAR(20),
    profile_image_url VARCHAR(500),
    role VARCHAR(50) DEFAULT 'user',
    is_active BOOLEAN DEFAULT true,
    last_login_at TIMESTAMP,
    deleted_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_users_kakao_id ON users(kakao_id);
CREATE INDEX idx_users_email ON users(email);
ÏÇ¨Ïö© Î∞©Î≤ï
Î∞±ÏóîÎìú Ïã§Ìñâ
bash
npm install
npm run dev
ÌîÑÎ°†Ìä∏ÏóîÎìú Ïã§Ìñâ
bash
npm install
npm run dev
API ÏóîÎìúÌè¨Ïù∏Ìä∏
‚Ä¢	GET /api/v1/auth/kakao - Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
‚Ä¢	GET /api/v1/auth/kakao/callback - Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏΩúÎ∞±
‚Ä¢	POST /api/v1/auth/refresh - ÌÜ†ÌÅ∞ Í∞±Ïã†
‚Ä¢	POST /api/v1/auth/logout - Î°úÍ∑∏ÏïÑÏõÉ
‚Ä¢	DELETE /api/v1/auth/account - ÌöåÏõê ÌÉàÌá¥
Ïù¥ Íµ¨ÌòÑÏùÄ ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Ïù∏Ï¶ù ÏãúÏä§ÌÖú Í∏∞Î∞òÏù¥ ÎêòÎ©∞, Ï∂îÍ∞ÄÏ†ÅÏù∏ ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨ÎÇò Í∂åÌïú Í∏∞Î∞ò Ï†ëÍ∑º Ï†úÏñ¥Î•º ÏâΩÍ≤å ÌôïÏû•Ìï† Ïàò ÏûàÏäµÎãàÎã§.
Ïû¨ÏãúÎèÑ
ClaudeÎäî Ïã§ÏàòÎ•º Ìï† Ïàò ÏûàÏäµÎãàÎã§. 
ÏùëÎãµÏùÑ Î∞òÎìúÏãú Îã§Ïãú ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.
‚ÄÉ
Î©îÎâ¥ CRUD APIÏùò ÏôÑÏ†ÑÌïú Íµ¨ÌòÑÏùÑ Ï†úÍ≥µÌñàÏäµÎãàÎã§. Î∞±ÏóîÎìúÏôÄ ÌîÑÎ°†Ìä∏ÏóîÎìú Î™®Îëê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.
Ï£ºÏöî Íµ¨ÌòÑ ÎÇ¥Ïö©
Î∞±ÏóîÎìú Í∏∞Îä•
1.	Î©îÎâ¥ CRUD ÏûëÏóÖ 
o	ÏÉùÏÑ±, Ï°∞Ìöå, ÏàòÏ†ï, ÏÇ≠Ï†ú
o	Î©îÎâ¥ Î≥µÏÇ¨ Í∏∞Îä•
o	ÏùºÍ¥Ñ ÏÉÅÌÉú Î≥ÄÍ≤Ω
2.	Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú 
o	AWS S3 Ïó∞Îèô
o	Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî
o	ÌååÏùº ÌÅ¨Í∏∞ Ï†úÌïú (5MB)
3.	ÏòµÏÖò Í¥ÄÎ¶¨ 
o	Îã§Ï§ë ÏòµÏÖò ÏßÄÏõê (ÏÇ¨Ïù¥Ï¶à, Îßõ, Ï∂îÍ∞ÄÌÜ†Ìïë Îì±)
o	Í∞Å ÏòµÏÖòÎ≥Ñ Ï∂îÍ∞Ä Í∞ÄÍ≤© ÏÑ§Ï†ï
o	ÌïÑÏàò/ÏÑ†ÌÉù ÏòµÏÖò Íµ¨Î∂Ñ
4.	Í≥†Í∏â Í∏∞Îä• 
o	Î©îÎâ¥ ÏàúÏÑú Î≥ÄÍ≤Ω (ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠)
o	Ïû¨Í≥† Í¥ÄÎ¶¨
o	Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÎ•ò
o	Ïù∏Í∏∞/Ïã†Î©îÎâ¥ ÌëúÏãú
ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Îä•
1.	Í¥ÄÎ¶¨ÏûêÏö© Î©îÎâ¥ Í¥ÄÎ¶¨ 
o	ÏßÅÍ¥ÄÏ†ÅÏù∏ Î©îÎâ¥ Í¥ÄÎ¶¨ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
o	ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏàúÏÑú Î≥ÄÍ≤Ω
o	Ïã§ÏãúÍ∞Ñ Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞
o	ÏòµÏÖò Í¥ÄÎ¶¨ UI
2.	Í≥†Í∞ùÏö© Î©îÎâ¥ ÌëúÏãú 
o	Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌïÑÌÑ∞ÎßÅ
o	ÏòµÏÖò ÏÑ†ÌÉù Î™®Îã¨
o	Ïû¨Í≥† ÌëúÏãú
o	ÌíàÏ†à ÏÉÅÌÉú Ï≤òÎ¶¨
API ÏóîÎìúÌè¨Ïù∏Ìä∏
Í≥µÍ∞ú API
‚Ä¢	GET /api/v1/menus/stores/:storeId/menus - ÏÉÅÏ†ê Î©îÎâ¥ Î™©Î°ù
‚Ä¢	GET /api/v1/menus/:menuId - Î©îÎâ¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
‚Ä¢	GET /api/v1/menus/stores/:storeId/categories - Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
Ïù∏Ï¶ù ÌïÑÏöî API
‚Ä¢	POST /api/v1/menus - Î©îÎâ¥ ÏÉùÏÑ±
‚Ä¢	PUT /api/v1/menus/:menuId - Î©îÎâ¥ ÏàòÏ†ï
‚Ä¢	DELETE /api/v1/menus/:menuId - Î©îÎâ¥ ÏÇ≠Ï†ú
‚Ä¢	PUT /api/v1/menus/stores/:storeId/order - Î©îÎâ¥ ÏàúÏÑú Î≥ÄÍ≤Ω
‚Ä¢	PATCH /api/v1/menus/:menuId/stock - Ïû¨Í≥† ÏóÖÎç∞Ïù¥Ìä∏
‚Ä¢	PATCH /api/v1/menus/stores/:storeId/bulk-status - ÏùºÍ¥Ñ ÏÉÅÌÉú Î≥ÄÍ≤Ω
‚Ä¢	POST /api/v1/menus/:menuId/duplicate - Î©îÎâ¥ Î≥µÏÇ¨
‚Ä¢	DELETE /api/v1/menus/:menuId/image - Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà
sql
CREATE TABLE menus (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    store_id UUID REFERENCES stores(id) ON DELETE CASCADE,
    category_name VARCHAR(100),
    name VARCHAR(200) NOT NULL,
    description TEXT,
    price DECIMAL(10, 0) NOT NULL CHECK (price >= 0),
    discounted_price DECIMAL(10, 0) CHECK (discounted_price >= 0),
    options JSONB, -- ÏòµÏÖò Ï†ïÎ≥¥
    image_url VARCHAR(500),
    is_available BOOLEAN DEFAULT true,
    is_popular BOOLEAN DEFAULT false,
    is_new BOOLEAN DEFAULT false,
    stock_quantity INTEGER,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Ïù∏Îç±Ïä§
CREATE INDEX idx_menus_store_id ON menus(store_id, is_available);
CREATE INDEX idx_menus_category ON menus(store_id, category_name);
CREATE INDEX idx_menus_popular ON menus(store_id, is_popular) WHERE is_popular = true;
ÏòµÏÖò Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÏòàÏãú
json
{
  "options": [
    {
      "name": "ÏÇ¨Ïù¥Ï¶à",
      "required": true,
      "max_select": 1,
      "choices": [
        { "name": "Small", "price": 0, "is_default": true },
        { "name": "Medium", "price": 500 },
        { "name": "Large", "price": 1000 }
      ]
    },
    {
      "name": "Ï∂îÍ∞Ä ÌÜ†Ìïë",
      "required": false,
      "max_select": 3,
      "choices": [
        { "name": "ÏπòÏ¶à", "price": 1000 },
        { "name": "Î≤†Ïù¥Ïª®", "price": 1500 },
        { "name": "ÏïºÏ±Ñ", "price": 500 }
      ]
    }
  ]
}
ÏÇ¨Ïö© Î∞©Î≤ï
Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÏóêÏÑú Î©îÎâ¥ Í¥ÄÎ¶¨
jsx
import MenuManagement from '@/components/MenuManagement';

// ÏÉÅÏ†ê Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏóêÏÑú
<MenuManagement storeId={storeId} />
Í≥†Í∞ù ÌéòÏù¥ÏßÄÏóêÏÑú Î©îÎâ¥ ÌëúÏãú
jsx
import { MenuList } from '@/components/MenuList';

// ÏÉÅÏ†ê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÏóêÏÑú
<MenuList storeId={storeId} />
Ïù¥ Íµ¨ÌòÑÏùÄ ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Î©îÎâ¥ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖúÏùÑ ÏôÑÏÑ±ÌïòÎ©∞, ÏÉÅÏ†êÏ£ºÍ∞Ä ÏâΩÍ≤å Î©îÎâ¥Î•º Í¥ÄÎ¶¨ÌïòÍ≥† Í≥†Í∞ùÏù¥ Ìé∏Î¶¨ÌïòÍ≤å Î©îÎâ¥Î•º Î≥º Ïàò ÏûàÎèÑÎ°ù ÏÑ§Í≥ÑÎêòÏóàÏäµÎãàÎã§.
ÌîÑÎ°†Ìä∏ÏóîÎìú React Ïª¥Ìè¨ÎÑåÌä∏Ïùò Ïã§Ìñâ Ïò§Î•òÎ•º ÏàòÏ†ïÌïòÏó¨ Îã§Ïãú Ï†úÍ≥µÌïòÍ≤†ÏäµÎãàÎã§.
Î©îÎâ¥ CRUD - ÌîÑÎ°†Ìä∏ÏóîÎìú Íµ¨ÌòÑ
ÎåÄÌôîÌòï ÏïÑÌã∞Ìå©Ìä∏‚ÄÇ‚àô‚ÄÇÎ≤ÑÏ†Ñ 3 
React Ïª¥Ìè¨ÎÑåÌä∏Ïùò Ïã§Ìñâ Ïò§Î•òÎ•º ÏàòÏ†ïÌñàÏäµÎãàÎã§. Ï£ºÏöî ÏàòÏ†ï ÏÇ¨Ìï≠:
1.	API Ìò∏Ï∂ú Ï†úÍ±∞: Ïã§Ï†ú API ÏóÜÏù¥ÎèÑ ÏûëÎèôÌïòÎèÑÎ°ù Î°úÏª¨ ÏÉÅÌÉú Í¥ÄÎ¶¨Î°ú Î≥ÄÍ≤Ω
2.	Îç∞Î™® Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä: Ï¥àÍ∏∞ Î©îÎâ¥ Îç∞Ïù¥ÌÑ∞Î•º Ìè¨Ìï®ÌïòÏó¨ Î∞îÎ°ú ÌôïÏù∏ Í∞ÄÎä•
3.	Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Í∞ÑÏÜåÌôî: ÌååÏùº ÏóÖÎ°úÎìú ÎåÄÏã† URL ÏûÖÎ†• Î∞©ÏãùÏúºÎ°ú Î≥ÄÍ≤Ω
4.	ÌÉÄÏûÖ Ïò§Î•ò ÏàòÏ†ï: TypeScript ÌÉÄÏûÖ Í¥ÄÎ†® Ïò§Î•ò Ìï¥Í≤∞
5.	Ìèº Ï†úÏ∂ú Î°úÏßÅ ÏàòÏ†ï: Ïã§Ï†ú ÏÑúÎ≤Ñ ÏóÜÏù¥ Î°úÏª¨ÏóêÏÑú ÎèôÏûëÌïòÎèÑÎ°ù ÏàòÏ†ï
Ïù¥Ï†ú Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÎ©∞, Îã§Ïùå Í∏∞Îä•Îì§ÏùÑ ÌÖåÏä§Ìä∏Ìï† Ïàò ÏûàÏäµÎãàÎã§:
‚Ä¢	Î©îÎâ¥ Ï∂îÍ∞Ä/ÏàòÏ†ï/ÏÇ≠Ï†ú
‚Ä¢	ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏàúÏÑú Î≥ÄÍ≤Ω
‚Ä¢	Î©îÎâ¥ Î≥µÏÇ¨
‚Ä¢	ÏòµÏÖò Í¥ÄÎ¶¨ (ÏÇ¨Ïù¥Ï¶à, ÎßµÍ∏∞ Îì±)
‚Ä¢	Ïû¨Í≥† Í¥ÄÎ¶¨
‚Ä¢	Ïù∏Í∏∞/Ïã†Î©îÎâ¥ ÌëúÏãú
Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏Ïóê Ï†ÅÏö©Ìï† ÎïåÎäî Î∞±ÏóîÎìú APIÏôÄ Ïó∞ÎèôÌïòÎäî Î∂ÄÎ∂ÑÎßå Ï∂îÍ∞ÄÌïòÎ©¥ Îê©ÎãàÎã§.

‚ÄÉ
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏòàÏïΩ ÏãúÏä§ÌÖú APIÎ•º ÏôÑÏÑ±ÌñàÏäµÎãàÎã§. Íµ¨ÌòÑÎêú Ï£ºÏöî Í∏∞Îä•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
üìã Íµ¨ÌòÑ ÏôÑÎ£å Ìï≠Î™©
1. ÏòàÏïΩ CRUD API
‚Ä¢	ÏòàÏïΩ ÏÉùÏÑ± (Î©îÎâ¥ ÏÑ†ÌÉù Ìè¨Ìï®)
‚Ä¢	ÏòàÏïΩ Ï°∞Ìöå (ÏÉÅÏÑ∏/Î™©Î°ù)
‚Ä¢	ÏòàÏïΩ ÏàòÏ†ï
‚Ä¢	ÏòàÏïΩ Ï∑®ÏÜå/ÌôïÏ†ï/ÏôÑÎ£å/ÎÖ∏Ïáº Ï≤òÎ¶¨
2. ÏïåÎ¶º ÏãúÏä§ÌÖú
‚Ä¢	SMS/LMS/MMS Î∞úÏÜ° (NHN Toast API)
‚Ä¢	Ïπ¥Ïπ¥Ïò§ÌÜ° ÏïåÎ¶ºÌÜ°
‚Ä¢	ÏòàÏïΩ Î¶¨ÎßàÏù∏Îçî (ÌÅ¨Î°†Ïû°)
‚Ä¢	ÌÖúÌîåÎ¶ø Í∏∞Î∞ò Î©îÏãúÏßÄ Í¥ÄÎ¶¨
3. ÏÉÅÌÉú Í¥ÄÎ¶¨
‚Ä¢	5Í∞ÄÏßÄ ÏÉÅÌÉú: pending ‚Üí confirmed ‚Üí completed
‚Ä¢	ÏÉÅÌÉú Ï†ÑÌôò Í≤ÄÏ¶ù
‚Ä¢	ÏûêÎèô ÎÖ∏Ïáº Ï≤òÎ¶¨
4. Ïã§ÏãúÍ∞Ñ Í∏∞Îä•
‚Ä¢	Server-Sent Events (SSE)
‚Ä¢	Redis Pub/Sub
‚Ä¢	Í∞ÄÍ≤å/ÏÇ¨Ïö©ÏûêÎ≥Ñ Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º
5. ÏÑ±Îä• ÏµúÏ†ÅÌôî
‚Ä¢	Redis Ï∫êÏã± (Cache-Aside Ìå®ÌÑ¥)
‚Ä¢	Ï∫êÏãú Î¨¥Ìö®Ìôî Ï†ÑÎûµ
‚Ä¢	Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïù∏Îç±Ïã±
6. Î≥¥Ïïà
‚Ä¢	JWT Ïù∏Ï¶ù
‚Ä¢	Í∂åÌïú Í∏∞Î∞ò Ï†ëÍ∑º Ï†úÏñ¥
‚Ä¢	Rate Limiting
‚Ä¢	ÏûÖÎ†• Í≤ÄÏ¶ù
üöÄ ÏÇ¨Ïö© Î∞©Î≤ï
API ÏóîÎìúÌè¨Ïù∏Ìä∏
bash
# ÏòàÏïΩ ÏÉùÏÑ±
POST /api/v1/reservations

# ÏòàÏïΩ Ï°∞Ìöå
GET /api/v1/reservations/:id
GET /api/v1/reservations?store_id=xxx&date_from=2025-01-20

# ÏòàÏïΩ ÏàòÏ†ï
PATCH /api/v1/reservations/:id

# ÏòàÏïΩ Ï∑®ÏÜå
POST /api/v1/reservations/:id/cancel

# ÏòàÏïΩ ÌôïÏ†ï (Í∞ÄÍ≤å Ï£ºÏù∏)
POST /api/v1/reservations/:id/confirm

# ÏòàÏïΩ Í∞ÄÎä• ÏãúÍ∞Ñ Ï°∞Ìöå
GET /api/v1/stores/:storeId/available-slots?date=2025-01-20

# Ïã§ÏãúÍ∞Ñ Ïù¥Î≤§Ìä∏ Íµ¨ÎèÖ
GET /api/v1/sse?storeId=xxx
ÏòàÏïΩ ÏÉùÏÑ± ÏòàÏãú
json
{
  "store_id": "123e4567-e89b-12d3-a456-426614174000",
  "reserver_name": "ÍπÄÏßÑÏïà",
  "reserver_phone_number": "010-1234-5678",
  "reservation_date": "2025-01-20",
  "reservation_time": "18:00",
  "number_of_people": 4,
  "menu_items": [
    {
      "menu_id": "menu123",
      "quantity": 2
    }
  ],
  "request_notes": "Ï∞ΩÍ∞Ä ÏûêÎ¶¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§"
}
üì¶ Îã§Ïùå Îã®Í≥Ñ Íµ¨ÌòÑ Ï†úÏïà
1.	Í≤∞Ï†ú ÏãúÏä§ÌÖú Ïó∞Îèô 
o	Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ ÏòàÏïΩÍ∏à Í≤∞Ï†ú
o	ÌôòÎ∂à Ï≤òÎ¶¨
2.	Î¶¨Î∑∞ ÏãúÏä§ÌÖú 
o	ÏòàÏïΩ ÏôÑÎ£å ÌõÑ Î¶¨Î∑∞ ÏûëÏÑ±
o	ÌèâÏ†ê Í¥ÄÎ¶¨
3.	ÌÜµÍ≥Ñ ÎåÄÏãúÎ≥¥Îìú 
o	ÏòàÏïΩ ÌòÑÌô© Î∂ÑÏÑù
o	Îß§Ï∂ú ÌÜµÍ≥Ñ
4.	Í≥†Í∏â Í∏∞Îä• 
o	ÎåÄÍ∏∞ Î™ÖÎã® Í¥ÄÎ¶¨
o	Î∞òÎ≥µ ÏòàÏïΩ
o	Í∑∏Î£π ÏòàÏïΩ
Ïù¥ ÏòàÏïΩ ÏãúÏä§ÌÖúÏùÄ ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÌïµÏã¨ Í∏∞Îä•ÏúºÎ°ú, ÌôïÏû• Í∞ÄÎä•ÌïòÍ≥† ÏïàÏ†ïÏ†ÅÏù∏ Íµ¨Ï°∞Î°ú ÏÑ§Í≥ÑÎêòÏóàÏäµÎãàÎã§.
Ïû¨ÏãúÎèÑ
ClaudeÎäî Ïã§ÏàòÎ•º Ìï† Ïàò ÏûàÏäµÎãàÎã§. 
ÏùëÎãµÏùÑ Î∞òÎìúÏãú Îã§Ïãú ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.


Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ Í≤∞Ï†ú ÏãúÏä§ÌÖú Ïó∞Îèô APIÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî Í∏∞Îä•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
Ï£ºÏöî Íµ¨ÌòÑ ÎÇ¥Ïö©
1. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î™®Îç∏
‚Ä¢	Payment Î™®Îç∏: Í≤∞Ï†ú Ï†ïÎ≥¥ Ï†ÄÏû• (Í±∞ÎûòID, Í∏àÏï°, ÏÉÅÌÉú Îì±)
‚Ä¢	Í≤∞Ï†ú ÏÉÅÌÉú Í¥ÄÎ¶¨: PENDING, COMPLETED, FAILED, CANCELLED, REFUNDED
2. Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ ÏÑúÎπÑÏä§ ÌÅ¥ÎûòÏä§
‚Ä¢	Í≤∞Ï†ú Ï§ÄÎπÑ (ready_payment)
‚Ä¢	Í≤∞Ï†ú ÏäπÏù∏ (approve_payment)
‚Ä¢	Í≤∞Ï†ú Ï∑®ÏÜå/ÌôòÎ∂à (cancel_payment)
3. API ÏóîÎìúÌè¨Ïù∏Ìä∏
‚Ä¢	POST /api/v1/payment/ready: Í≤∞Ï†ú Ï§ÄÎπÑ
‚Ä¢	POST /api/v1/payment/approve: Í≤∞Ï†ú ÏäπÏù∏
‚Ä¢	POST /api/v1/payment/refund: ÌôòÎ∂à Ï≤òÎ¶¨
‚Ä¢	GET /api/v1/payment/status/{reservation_id}: Í≤∞Ï†ú ÏÉÅÌÉú Ï°∞Ìöå
4. Ï£ºÏöî Í∏∞Îä•
‚Ä¢	ÏòàÏïΩÍ∏à Í≤∞Ï†ú Ï≤òÎ¶¨
‚Ä¢	Í≤∞Ï†ú ÏôÑÎ£å Ïãú ÏòàÏïΩ ÏÉÅÌÉú ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
‚Ä¢	24ÏãúÍ∞Ñ Ï†ÑÍπåÏßÄÎßå ÌôòÎ∂à Í∞ÄÎä• Ï†ïÏ±Ö Ï†ÅÏö©
‚Ä¢	Ï§ëÎ≥µ Í≤∞Ï†ú Î∞©ÏßÄ
5. Î≥¥Ïïà ÏÇ¨Ìï≠
‚Ä¢	ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ùÏùÑ ÌÜµÌïú Ï†ëÍ∑º Ï†úÏñ¥
‚Ä¢	Î≥∏Ïù∏Ïùò ÏòàÏïΩÏóê ÎåÄÌï¥ÏÑúÎßå Í≤∞Ï†ú/ÌôòÎ∂à Í∞ÄÎä•
‚Ä¢	Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ Admin KeyÎ•º ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú Í¥ÄÎ¶¨
ÏÇ¨Ïö© Î∞©Î≤ï
1.	ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï:
bash
KAKAO_ADMIN_KEY=your_kakao_admin_key
KAKAO_CID=TC0ONETIME  # ÌÖåÏä§Ìä∏Ïö©
FRONTEND_URL=http://localhost:3000
2.	Í≤∞Ï†ú ÌîÑÎ°úÏÑ∏Ïä§: 
o	Í≤∞Ï†ú Ï§ÄÎπÑ API Ìò∏Ï∂ú ‚Üí Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ Í≤∞Ï†ú URL Î∞õÍ∏∞
o	ÏÇ¨Ïö©ÏûêÎ•º Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ Í≤∞Ï†ú ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
o	Í≤∞Ï†ú ÏôÑÎ£å ÌõÑ ÏäπÏù∏ API Ìò∏Ï∂ú
o	ÏòàÏïΩ ÏÉÅÌÉúÍ∞Ä ÏûêÎèôÏúºÎ°ú CONFIRMEDÎ°ú Î≥ÄÍ≤Ω
3.	ÌôòÎ∂à ÌîÑÎ°úÏÑ∏Ïä§: 
o	ÏòàÏïΩ ÏãúÍ∞Ñ 24ÏãúÍ∞Ñ Ï†ÑÍπåÏßÄÎßå Í∞ÄÎä•
o	ÌôòÎ∂à API Ìò∏Ï∂ú Ïãú ÏûêÎèôÏúºÎ°ú ÏòàÏïΩ Ï∑®ÏÜå Ï≤òÎ¶¨
ÌîÑÎ°†Ìä∏ÏóîÎìú Íµ¨ÌòÑ ÏòàÏãúÎèÑ Ìè¨Ìï®ÌñàÏúºÎãà Ï∞∏Í≥†ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.


ÏΩîÎìú 
# app/models/review.py from sqlalchemy import Column, Integer, String, Text, DateTime, Float, ForeignKey, Boolean from sqlalchemy.orm import relationship from app.database import Base from datetime import datetime class Review(Base): __tablename
Î¶¨Î∑∞ ÏãúÏä§ÌÖú APIÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî Í∏∞Îä•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
Ï£ºÏöî Íµ¨ÌòÑ ÎÇ¥Ïö©
1. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î™®Îç∏
‚Ä¢	Review Î™®Îç∏: Î¶¨Î∑∞ Ï†ïÎ≥¥ (ÌèâÏ†ê, ÏΩîÎ©òÌä∏, Í≤ÄÏ¶ù Ïó¨Î∂Ä)
‚Ä¢	ReviewImage Î™®Îç∏: Î¶¨Î∑∞ Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
‚Ä¢	1-5Ï†ê ÌèâÏ†ê ÏãúÏä§ÌÖú (0.5 Îã®ÏúÑ)
2. API ÏóîÎìúÌè¨Ïù∏Ìä∏
‚Ä¢	POST /api/v1/reviews/: Î¶¨Î∑∞ ÏûëÏÑ±
‚Ä¢	GET /api/v1/reviews/hospital/{hospital_id}: Î≥ëÏõêÎ≥Ñ Î¶¨Î∑∞ Î™©Î°ù
‚Ä¢	GET /api/v1/reviews/my-reviews: ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú Î¶¨Î∑∞
‚Ä¢	PUT /api/v1/reviews/{review_id}: Î¶¨Î∑∞ ÏàòÏ†ï
‚Ä¢	DELETE /api/v1/reviews/{review_id}: Î¶¨Î∑∞ ÏÇ≠Ï†ú
‚Ä¢	GET /api/v1/reviews/check-reviewable/{reservation_id}: Î¶¨Î∑∞ ÏûëÏÑ± Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
3. Ï£ºÏöî Í∏∞Îä•
Î¶¨Î∑∞ ÏûëÏÑ± Ï†úÌïú
‚Ä¢	ÏòàÏïΩ ÏôÑÎ£å(COMPLETED) ÏÉÅÌÉúÏóêÏÑúÎßå ÏûëÏÑ± Í∞ÄÎä•
‚Ä¢	ÏòàÏïΩÎãπ 1Í∞úÏùò Î¶¨Î∑∞Îßå ÏûëÏÑ± Í∞ÄÎä•
‚Ä¢	ÏòàÏïΩ ÏôÑÎ£å ÌõÑ 30Ïùº Ïù¥ÎÇ¥Îßå ÏûëÏÑ± Í∞ÄÎä•
‚Ä¢	Í≤ÄÏ¶ùÎêú Î¶¨Î∑∞ ÌëúÏãú (is_verified)
Î¶¨Î∑∞ ÏàòÏ†ï/ÏÇ≠Ï†ú
‚Ä¢	ÏûëÏÑ± ÌõÑ 7Ïùº Ïù¥ÎÇ¥Îßå ÏàòÏ†ï Í∞ÄÎä•
‚Ä¢	Î≥∏Ïù∏Ïù¥ ÏûëÏÑ±Ìïú Î¶¨Î∑∞Îßå ÏàòÏ†ï/ÏÇ≠Ï†ú Í∞ÄÎä•
ÌèâÏ†ê Í¥ÄÎ¶¨
‚Ä¢	0.5 Îã®ÏúÑ ÌèâÏ†ê (1.0, 1.5, 2.0, ..., 5.0)
‚Ä¢	Î≥ëÏõêÎ≥Ñ ÌèâÍ∑† ÌèâÏ†ê ÏûêÎèô Í≥ÑÏÇ∞
‚Ä¢	ÌèâÏ†ê Î∂ÑÌè¨ ÌÜµÍ≥Ñ Ï†úÍ≥µ
Î¶¨Î∑∞ Ï°∞Ìöå
‚Ä¢	ÏµúÏã†Ïàú, ÌèâÏ†ê ÎÜíÏùÄÏàú, ÌèâÏ†ê ÎÇÆÏùÄÏàú Ï†ïÎ†¨
‚Ä¢	ÌèâÏ†êÎ≥Ñ ÌïÑÌÑ∞ÎßÅ
‚Ä¢	ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏßÄÏõê
‚Ä¢	Î¶¨Î∑∞ Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï®
4. Ï∂îÍ∞Ä Í∏∞Îä•
‚Ä¢	Î¶¨Î∑∞ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏßÄÏõê
‚Ä¢	Î¶¨Î∑∞ ÏûëÏÑ±Ïûê Ïù¥Î¶Ñ ÌëúÏãú
‚Ä¢	Î¶¨Î∑∞ Í∞úÏàò ÌÜµÍ≥Ñ
‚Ä¢	ÌèâÏ†ê Î∂ÑÌè¨ Ï∞®Ìä∏Ïö© Îç∞Ïù¥ÌÑ∞ Ï†úÍ≥µ
ÏÇ¨Ïö© ÏòàÏãú
Î¶¨Î∑∞ ÏûëÏÑ±
python
POST /api/v1/reviews/
{
    "reservation_id": 1,
    "rating": 4.5,
    "comment": "ÏπúÏ†àÌïòÍ≥† ÍººÍººÌïòÍ≤å ÏßÑÎ£åÌï¥Ï£ºÏÖ®ÏäµÎãàÎã§.",
    "images": ["https://example.com/image1.jpg"]
}
Î≥ëÏõê Î¶¨Î∑∞ Ï°∞Ìöå
python
GET /api/v1/reviews/hospital/1?page=1&limit=10&sort_by=recent

Response:
{
    "reviews": [...],
    "total_count": 150,
    "average_rating": 4.3,
    "rating_distribution": {
        "5": 50,
        "4": 60,
        "3": 30,
        "2": 8,
        "1": 2
    }
}
Ïù¥ ÏãúÏä§ÌÖúÏùÄ ÏòàÏïΩ ÏôÑÎ£å ÌõÑ ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥ëÏõê ÏÑúÎπÑÏä§Ïóê ÎåÄÌïú ÌîºÎìúÎ∞±ÏùÑ ÎÇ®Í∏∏ Ïàò ÏûàÍ≤å ÌïòÎ©∞, Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Ïù¥ Î≥ëÏõê ÏÑ†ÌÉù Ïãú Ï∞∏Í≥†Ìï† Ïàò ÏûàÎäî Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§.


ÌÜµÍ≥Ñ ÎåÄÏãúÎ≥¥Îìú APIÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî Í∏∞Îä•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
Ï£ºÏöî Íµ¨ÌòÑ ÎÇ¥Ïö©
1. ÎåÄÏãúÎ≥¥Îìú ÏöîÏïΩ (/dashboard/{hospital_id})
Ïã§ÏãúÍ∞Ñ Ï£ºÏöî ÏßÄÌëúÎ•º ÌïúÎààÏóê ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§:
Ïò§ÎäòÏùò ÏßÄÌëú
‚Ä¢	Ïò§Îäò ÏòàÏïΩ Í±¥Ïàò
‚Ä¢	Ïò§Îäò Îß§Ï∂úÏï°
‚Ä¢	Ïò§Îäò Ïã†Í∑ú ÌôòÏûê Ïàò
Ïù¥Î≤à Îã¨ ÏßÄÌëú
‚Ä¢	ÏõîÍ∞Ñ ÏòàÏïΩ Í±¥Ïàò
‚Ä¢	ÏõîÍ∞Ñ Îß§Ï∂úÏï°
‚Ä¢	Ï†ÑÏõî ÎåÄÎπÑ ÏÑ±Ïû•Î•†
Ï£ºÏöî ÌÜµÍ≥Ñ
‚Ä¢	ÌèâÍ∑† ÌèâÏ†ê Î∞è Î¶¨Î∑∞ Ïàò
‚Ä¢	ÏòàÏïΩ ÌôïÏ†ïÎ•†
‚Ä¢	Ïù∏Í∏∞ ÏãúÍ∞ÑÎåÄ TOP 5
‚Ä¢	Ïù∏Í∏∞ ÏÑúÎπÑÏä§ TOP 5
2. Í∏∞Í∞ÑÎ≥Ñ ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ (/period/{hospital_id})
ÏõêÌïòÎäî Í∏∞Í∞ÑÏùò ÏÉÅÏÑ∏ ÌÜµÍ≥ÑÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§:
ÏßëÍ≥Ñ Îã®ÏúÑ
‚Ä¢	ÏùºÎ≥Ñ (daily)
‚Ä¢	Ï£ºÎ≥Ñ (weekly)
‚Ä¢	ÏõîÎ≥Ñ (monthly)
ÏòàÏïΩ ÌÜµÍ≥Ñ
‚Ä¢	Ï†ÑÏ≤¥ ÏòàÏïΩ Ïàò
‚Ä¢	ÌôïÏ†ï/Ï∑®ÏÜå/ÏôÑÎ£å/ÎÖ∏Ïáº Í±¥Ïàò
‚Ä¢	ÌôïÏ†ïÎ•†/Ï∑®ÏÜåÏú®/ÏôÑÎ£åÏú®
Îß§Ï∂ú ÌÜµÍ≥Ñ
‚Ä¢	Ï¥ù Îß§Ï∂úÏï°
‚Ä¢	ÏôÑÎ£åÎêú Í≤∞Ï†úÏï°
‚Ä¢	ÌôòÎ∂à Í∏àÏï°
‚Ä¢	Ïàú Îß§Ï∂úÏï°
‚Ä¢	ÌèâÍ∑† Í≤∞Ï†ú Í∏àÏï°
3. Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (/export/{hospital_id})
ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞Î•º CSV ÌòïÏãùÏúºÎ°ú ÎÇ¥Î≥¥ÎÇº Ïàò ÏûàÏäµÎãàÎã§.
ÏÇ¨Ïö© ÏòàÏãú
ÎåÄÏãúÎ≥¥Îìú ÏöîÏïΩ Ï°∞Ìöå
python
GET /api/v1/statistics/dashboard/1

Response:
{
    "today_reservations": 15,
    "today_revenue": 450000.0,
    "today_new_patients": 3,
    "month_reservations": 320,
    "month_revenue": 9600000.0,
    "month_growth_rate": 12.5,
    "average_rating": 4.3,
    "total_reviews": 156,
    "confirmation_rate": 85.5,
    "popular_time_slots": [
        {"time_slot": "10:00", "count": 45, "percentage": 25.5},
        {"time_slot": "14:00", "count": 38, "percentage": 21.3}
    ],
    "popular_services": [
        {"service_name": "ÏûÑÌîåÎûÄÌä∏", "service_id": 1, "count": 28, "revenue": 5600000.0, "percentage": 58.3}
    ]
}
Í∏∞Í∞ÑÎ≥Ñ ÌÜµÍ≥Ñ Ï°∞Ìöå
python
GET /api/v1/statistics/period/1?start_date=2024-01-01&end_date=2024-01-31&period_type=weekly

Response:
{
    "start_date": "2024-01-01",
    "end_date": "2024-01-31",
    "reservations": [
        {
            "period": "2024-01-01 ~ 2024-01-07",
            "total_count": 85,
            "confirmed_count": 72,
            "cancelled_count": 8,
            "completed_count": 65,
            "no_show_count": 5,
            "confirmation_rate": 84.7,
            "cancellation_rate": 9.4,
            "completion_rate": 76.5
        }
    ],
    "revenues": [
        {
            "period": "2024-01-01 ~ 2024-01-07",
            "total_revenue": 2400000.0,
            "completed_payments": 2400000.0,
            "refunded_amount": 150000.0,
            "net_revenue": 2250000.0,
            "average_payment": 36923.08,
            "payment_count": 65
        }
    ],
    "total_reservations": 340,
    "total_revenue": 9600000.0,
    "average_daily_reservations": 11.0,
    "average_daily_revenue": 309677.42
}
Ï£ºÏöî ÌäπÏßï
1. Í∂åÌïú Í¥ÄÎ¶¨
‚Ä¢	Î≥ëÏõê Í¥ÄÎ¶¨ÏûêÎßå Ìï¥Îãπ Î≥ëÏõêÏùò ÌÜµÍ≥Ñ Ï°∞Ìöå Í∞ÄÎä•
‚Ä¢	ÏäàÌçºÏú†Ï†ÄÎäî Î™®Îì† Î≥ëÏõê ÌÜµÍ≥Ñ Ï°∞Ìöå Í∞ÄÎä•
2. ÏÑ±Îä• ÏµúÏ†ÅÌôî
‚Ä¢	Ìö®Ïú®Ï†ÅÏù∏ ÏøºÎ¶¨Î•º ÌÜµÌïú Îπ†Î•∏ ÌÜµÍ≥Ñ ÏßëÍ≥Ñ
‚Ä¢	ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Îßå Ï°∞ÌöåÌïòÏó¨ ÏùëÎãµ ÏÜçÎèÑ Ìñ•ÏÉÅ
3. Ïú†Ïó∞Ìïú Î∂ÑÏÑù
‚Ä¢	Îã§ÏñëÌïú Í∏∞Í∞Ñ ÏÑ§Ï†ï Í∞ÄÎä•
‚Ä¢	ÏùºÎ≥Ñ/Ï£ºÎ≥Ñ/ÏõîÎ≥Ñ ÏßëÍ≥Ñ ÏßÄÏõê
‚Ä¢	CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Í∏∞Îä•
4. Ïã§Ïö©Ï†ÅÏù∏ ÏßÄÌëú
‚Ä¢	ÏòàÏïΩ Ìå®ÌÑ¥ Î∂ÑÏÑù (Ïù∏Í∏∞ ÏãúÍ∞ÑÎåÄ)
‚Ä¢	ÏÑúÎπÑÏä§Î≥Ñ Îß§Ï∂ú Î∂ÑÏÑù
‚Ä¢	ÏÑ±Ïû•Î•† Ï∂îÏ†Å
‚Ä¢	Í≥†Í∞ù ÌñâÎèô Î∂ÑÏÑù (ÌôïÏ†ïÎ•†, Ï∑®ÏÜåÏú® Îì±)
Ïù¥ ÌÜµÍ≥Ñ ÎåÄÏãúÎ≥¥ÎìúÎ•º ÌÜµÌï¥ Î≥ëÏõê Ïö¥ÏòÅÏûêÎäî ÏòàÏïΩ ÌòÑÌô©Í≥º Îß§Ï∂úÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î™®ÎãàÌÑ∞ÎßÅÌïòÍ≥†, Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò ÏùòÏÇ¨Í≤∞Ï†ïÏùÑ Ìï† Ïàò ÏûàÏäµÎãàÎã§.
‚ÄÉ
Next.jsÏóêÏÑú S3Î•º ÌôúÏö©Ìïú Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏãúÏä§ÌÖúÏùÑ Íµ¨ÌòÑÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§. Ïù¥ÎØ∏ÏßÄ Î¶¨ÏÇ¨Ïù¥Ïßï, ÏµúÏ†ÅÌôî, CDN Ïó∞ÎèôÏùÑ Ìè¨Ìï®Ìïú ÏôÑÏ†ÑÌïú ÏÜîÎ£®ÏÖòÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
S3 Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏãúÏä§ÌÖú Íµ¨ÌòÑ Í∞ÄÏù¥Îìú
Î¨∏ÏÑú 
# S3 Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏãúÏä§ÌÖú Íµ¨ÌòÑ ## 1. ÌïÑÏöîÌïú Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò ```bash npm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner npm install multer multer-s3 npm install sharp npm install formidable npm install mime-types ``` ## 2. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï `.env.local` ÌååÏùºÏóê Îã§Ïùå ÌôòÍ≤Ω Î≥ÄÏàòÎ•º Ï∂î
S3 Í∏∞Î∞ò Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏãúÏä§ÌÖúÏùò ÏôÑÏ†ÑÌïú Íµ¨ÌòÑÏùÑ Ï†úÍ≥µÌñàÏäµÎãàÎã§. Ï£ºÏöî ÌäπÏßïÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
ÌïµÏã¨ Í∏∞Îä•
1.	Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÎØ∏Îì§Ïõ®Ïñ¥ 
o	ÌååÏùº ÌÅ¨Í∏∞ Î∞è ÌÉÄÏûÖ Í≤ÄÏ¶ù
o	Îã§Ï§ë ÌååÏùº ÏóÖÎ°úÎìú ÏßÄÏõê
o	ÏóêÎü¨ Ï≤òÎ¶¨ Î∞è Í≤ÄÏ¶ù
2.	ÏûêÎèô Î¶¨ÏÇ¨Ïù¥Ïßï Î∞è ÏµúÏ†ÅÌôî 
o	Sharp ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º ÏÇ¨Ïö©Ìïú 5Í∞ÄÏßÄ ÌÅ¨Í∏∞ ÏûêÎèô ÏÉùÏÑ±
o	WebP Ìè¨Îß∑ÏúºÎ°ú ÏûêÎèô Î≥ÄÌôò
o	Progressive Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
o	ÌíàÏßà ÏµúÏ†ÅÌôî
3.	CDN Ïó∞Îèô 
o	CloudFront ÌÜµÌï©
o	Ï∫êÏãú Ï†ïÏ±Ö ÏÑ§Ï†ï
o	ÏûêÎèô ÏïïÏ∂ï ÌôúÏÑ±Ìôî
4.	ÏÑ±Îä• ÏµúÏ†ÅÌôî 
o	Î≥ëÎ†¨ ÏóÖÎ°úÎìú Ï≤òÎ¶¨
o	Lazy loading ÏßÄÏõê
o	Î∞òÏùëÌòï Ïù¥ÎØ∏ÏßÄ Ï†úÍ≥µ
o	Î°úÎî© ÏÉÅÌÉú ÌëúÏãú
ÏÇ¨Ïö© Î∞©Î≤ï
1.	AWS Í≥ÑÏ†ïÏóêÏÑú S3 Î≤ÑÌÇ∑Í≥º CloudFront Î∞∞Ìè¨ ÏÉùÏÑ±
2.	ÌôòÍ≤Ω Î≥ÄÏàòÏóê AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÏÑ§Ï†ï
3.	ÌïÑÏöîÌïú Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò
4.	Ï†úÍ≥µÎêú Ïª¥Ìè¨ÎÑåÌä∏ÏôÄ API ÎùºÏö∞Ìä∏ ÏÇ¨Ïö©
Ïù¥ ÏãúÏä§ÌÖúÏùÄ ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú Î∞îÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏúºÎ©∞, ÌïÑÏöîÏóê Îî∞Îùº ÏâΩÍ≤å ÌôïÏû• Í∞ÄÎä•Ìï©ÎãàÎã§. Ï∂îÍ∞ÄÎ°ú Íµ¨ÌòÑÌïòÍ≥† Ïã∂ÏùÄ Í∏∞Îä•Ïù¥ÎÇò ÏßàÎ¨∏Ïù¥ ÏûàÏúºÏãúÎ©¥ ÎßêÏîÄÌï¥ Ï£ºÏÑ∏Ïöî


Î≥¥Ïïà Í≥†Î†§ÏÇ¨Ìï≠
1.	ÏóÖÎ°úÎìú Ï†úÌïú: 
o	ÌååÏùº ÌÅ¨Í∏∞ Ï†úÌïú
o	MIME ÌÉÄÏûÖ Í≤ÄÏ¶ù
o	ÌååÏùº ÌôïÏû•Ïûê Í≤ÄÏ¶ù
o	Rate limiting Íµ¨ÌòÑ
2.	S3 Î≥¥Ïïà: 
o	IAM Ïó≠Ìï† ÏµúÏÜå Í∂åÌïú ÏõêÏπô
o	Î≤ÑÌÇ∑ Ï†ïÏ±ÖÏúºÎ°ú Ï†ëÍ∑º Ï†úÌïú
o	ÏÑúÎ™ÖÎêú URL ÏÇ¨Ïö© Í≥†Î†§
3.	Ïù¥ÎØ∏ÏßÄ Í≤ÄÏ¶ù: 
o	ÏïÖÏÑ± ÏΩîÎìú Ïä§Ï∫î
o	Ïù¥ÎØ∏ÏßÄ ÎÇ¥Ïö© Í≤ÄÏ¶ù
o	EXIF Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞
ÏÑ±Îä• ÏµúÏ†ÅÌôî
1.	Î≥ëÎ†¨ ÏóÖÎ°úÎìú: Ïó¨Îü¨ ÌÅ¨Í∏∞Ïùò Ïù¥ÎØ∏ÏßÄÎ•º ÎèôÏãúÏóê ÏóÖÎ°úÎìú
2.	Progressive Enhancement: ÏûëÏùÄ ÌÅ¨Í∏∞Î∂ÄÌÑ∞ ÏàúÏ∞®Ï†Å Î°úÎî©
3.	Lazy Loading: Intersection Observer ÌôúÏö©
4.	CDN Ï∫êÏã±: CloudFront Ï∫êÏãú Ï†ïÏ±Ö ÏµúÏ†ÅÌôî
5.	WebP Ìè¨Îß∑: Îçî ÎÇòÏùÄ ÏïïÏ∂ïÎ•†Í≥º ÌíàÏßà
Ïù¥ Íµ¨ÌòÑÏùÄ ÌôïÏû• Í∞ÄÎä•ÌïòÍ≥† ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Í≤¨Í≥†Ìïú Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏãúÏä§ÌÖúÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
‚ÄÉ
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞Î•º ÏôÑÏÑ±ÎèÑ ÏûàÍ≤å Íµ¨ÌòÑÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± - ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞ ÏÑ§Ï†ï
Î¨∏ÏÑú 
# ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± - ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞ ÏÑ§Ï†ï ## 1. ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî ```bash # Next.js ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± npx create-next-app@latest jinan-market-frontend --typescript --tailwind --app # ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô cd jinan-market-frontend # ÌïÑÏàò Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò npm install axios zustand @tanstack/react-que
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞Î•º ÏôÑÏÑ±ÌñàÏäµÎãàÎã§. Ï£ºÏöî ÌäπÏßïÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
‚úÖ Íµ¨ÌòÑ ÏôÑÎ£å Ìï≠Î™©
1. Next.js 14+ App Router ÏÑ§Ï†ï
‚Ä¢	TypeScript Í∏∞Î∞ò ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞
‚Ä¢	Î™®ÎìàÌôîÎêú Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨Ï°∞
‚Ä¢	SEO ÏµúÏ†ÅÌôîÎêú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
2. Î™®Î∞îÏùº Ïö∞ÏÑ† Î∞òÏùëÌòï Î†àÏù¥ÏïÑÏõÉ
‚Ä¢	Î™®Î∞îÏùº Í∏∞Í∏∞Ïùò ÎÖ∏Ïπò/ÏïàÏ†ÑÏòÅÏó≠ ÎåÄÏùë
‚Ä¢	ÏµúÏÜå 44px ÌÑ∞Ïπò ÌÉÄÍ≤ü ÌôïÎ≥¥
‚Ä¢	Î∞òÏùëÌòï ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò (ÌñÑÎ≤ÑÍ±∞ Î©îÎâ¥)
‚Ä¢	Î™®Î∞îÏùº ÏµúÏ†ÅÌôîÎêú Ïä§ÌÉÄÏùºÎßÅ
3. API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ (Axios)
‚Ä¢	Ïù∏ÌÑ∞ÏÖâÌÑ∞Î•º ÌÜµÌïú ÏûêÎèô ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨
‚Ä¢	ÏóêÎü¨ Ìï∏Îì§ÎßÅ Î∞è ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º
‚Ä¢	ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ±ÏùÑ ÏúÑÌïú Ï†úÎÑ§Î¶≠ Î©îÏÑúÎìú
4. ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
‚Ä¢	API ÏóîÎìúÌè¨Ïù∏Ìä∏
‚Ä¢	Ïπ¥Ïπ¥Ïò§ API ÌÇ§
‚Ä¢	ÌååÏùº ÏóÖÎ°úÎìú ÏÑ§Ï†ï
‚Ä¢	Í∏∞Î≥∏ ÏúÑÏπò Ï†ïÎ≥¥ (ÏßÑÏïàÍµ∞ Ï¢åÌëú)
5. PWA Í∏∞Î≥∏ ÏÑ§Ï†ï
‚Ä¢	Service Worker Ï∫êÏã± Ï†ÑÎûµ
‚Ä¢	Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõê
‚Ä¢	Ïï± ÏïÑÏù¥ÏΩò Î∞è Ïä§ÌîåÎûòÏãú Ïä§ÌÅ¨Î¶∞
‚Ä¢	Web App Manifest
6. Ï∂îÍ∞Ä Íµ¨ÌòÑ ÏÇ¨Ìï≠
‚Ä¢	Zustand ÏÉÅÌÉú Í¥ÄÎ¶¨ (Ïù∏Ï¶ù ÏÉÅÌÉú ÏòÅÏÜçÏÑ±)
‚Ä¢	React Query ÏÑúÎ≤Ñ ÏÉÅÌÉú Í¥ÄÎ¶¨
‚Ä¢	ÏúÑÏπò Ï†ïÎ≥¥ ÌõÖ (useGeolocation)
‚Ä¢	Î≥¥Ïïà Ìó§Îçî ÏÑ§Ï†ï
‚Ä¢	Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî (AVIF/WebP ÏßÄÏõê)
üöÄ Îã§Ïùå Îã®Í≥Ñ
Ïù¥Ï†ú Í∏∞Î≥∏ Íµ¨Ï°∞Í∞Ä ÏôÑÏÑ±ÎêòÏóàÏúºÎãà, Îã§Ïùå ÏàúÏÑúÎ°ú ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌïòÏÑ∏Ïöî:
1.	Ìôà ÌéòÏù¥ÏßÄ (app/page.tsx) - ÏÉÅÏ†ê Î™©Î°ù ÌëúÏãú
2.	Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ (app/(auth)/login/page.tsx) - Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏
3.	ÏÉÅÏ†ê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ (app/stores/[id]/page.tsx)
4.	ÏòàÏïΩ Ìèº (app/reservations/new/page.tsx)
ÏõêÌïòÏãúÎäî ÌéòÏù¥ÏßÄÏùò Íµ¨Ï≤¥Ï†ÅÏù∏ Íµ¨ÌòÑ ÏΩîÎìúÎ•º Ï†úÍ≥µÌï¥ÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§. Ïñ¥Îñ§ ÌéòÏù¥ÏßÄÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?


Ïã§Ìñâ Î∞©Î≤ï
1.	ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Î∞è ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò:
bash
npx create-next-app@latest jinan-market-frontend --typescript --tailwind --app
cd jinan-market-frontend
npm install axios zustand @tanstack/react-query react-hook-form zod @hookform/resolvers date-fns react-toastify next-pwa workbox-webpack-plugin sharp
2.	ÏúÑÏùò ÌååÏùºÎì§ÏùÑ Í∞ÅÍ∞ÅÏùò Í≤ΩÎ°úÏóê ÏÉùÏÑ±
3.	ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï (.env.local ÌååÏùºÏóê Ïã§Ï†ú Í∞í ÏûÖÎ†•)
4.	Í∞úÎ∞ú ÏÑúÎ≤Ñ Ïã§Ìñâ:
bash
npm run dev
5.	ÎπåÎìú Î∞è ÌîÑÎ°úÎçïÏÖò Ïã§Ìñâ:
bash
npm run build
npm start
Ïù¥Ï†ú ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞Í∞Ä ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§. Îã§Ïùå Îã®Í≥ÑÎäî Ïã§Ï†ú ÌéòÏù¥ÏßÄ Íµ¨ÌòÑÏûÖÎãàÎã§.


ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Ï∂îÍ∞Ä Í∏∞Îä•Îì§ÏùÑ ÏôÑÏÑ±ÌñàÏäµÎãàÎã§. Í∞Å Í∏∞Îä•Ïùò ÌïµÏã¨ Íµ¨ÌòÑ ÏÇ¨Ìï≠ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
‚úÖ Íµ¨ÌòÑ ÏôÑÎ£å Ìï≠Î™©
1. Zustand ÏÉÅÌÉú Í¥ÄÎ¶¨ ÌôïÏû•
‚Ä¢	UI ÏÉÅÌÉú Ïä§ÌÜ†Ïñ¥: Î°úÎî©, ÏÇ¨Ïù¥ÎìúÎ∞î, ÌïÑÌÑ∞ÎßÅ, Í≤ÄÏÉâ Í¥ÄÎ¶¨
‚Ä¢	Ïû•Î∞îÍµ¨Îãà Ïä§ÌÜ†Ïñ¥: ÏÉÅÌíà Ï∂îÍ∞Ä/ÏÇ≠Ï†ú, ÏàòÎüâ Í¥ÄÎ¶¨, ÏòÅÏÜçÏÑ± ÏßÄÏõê
‚Ä¢	ÏúÑÏπò Ï†ïÎ≥¥ Ïä§ÌÜ†Ïñ¥: ÌòÑÏû¨ ÏúÑÏπò, ÏÑ†ÌÉù ÏúÑÏπò, Ï£ºÎ≥Ä ÏÉÅÏ†ê Í¥ÄÎ¶¨
‚Ä¢	ÏÖÄÎ†âÌÑ∞ Ìå®ÌÑ¥: ÏÑ±Îä• ÏµúÏ†ÅÌôîÎ•º ÏúÑÌïú ÏÑ†ÌÉùÏ†Å Íµ¨ÎèÖ
‚Ä¢	ÎØ∏Îì§Ïõ®Ïñ¥: devtools, persist, immer ÌÜµÌï©
2. React Query Í≥†Í∏â Íµ¨ÌòÑ
‚Ä¢	Î¨¥Ìïú Ïä§ÌÅ¨Î°§: ÏÉÅÏ†ê Î™©Î°ù ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
‚Ä¢	Optimistic Updates: Ï¢ãÏïÑÏöî Í∏∞Îä•Ïùò Ï¶âÍ∞ÅÏ†Å UI Î∞òÏòÅ
‚Ä¢	Ï∫êÏãú Ï†ÑÎûµ: 
o	ÏÉÅÏ†ê ÏÉÅÏÑ∏: 5Î∂Ñ staleTime
o	Ï£ºÎ≥Ä ÏÉÅÏ†ê: 2Î∂Ñ staleTime
o	ÏûêÎèô Ï∫êÏãú Î¨¥Ìö®Ìôî
‚Ä¢	ÏóêÎü¨ Ï≤òÎ¶¨: ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º ÌÜµÌï©
‚Ä¢	ÏøºÎ¶¨ ÌÇ§ Í¥ÄÎ¶¨: Ï≤¥Í≥ÑÏ†ÅÏù∏ ÌÇ§ Íµ¨Ï°∞
3. Í≥†Í∏â ÏúÑÏπò Ï†ïÎ≥¥ Í∏∞Îä•
‚Ä¢	Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å: watchPosition ÏßÄÏõê
‚Ä¢	Ï†ïÌôïÎèÑ Ï∏°Ï†ï: 50m Ïù¥Ìïò Í≥†Ï†ïÎ∞Ä ÌåêÎã®
‚Ä¢	Í±∞Î¶¨ Í≥ÑÏÇ∞: Haversine Í≥µÏãù Íµ¨ÌòÑ
‚Ä¢	Í≤ΩÍ≥Ñ ÏÉÅÏûê: ÏßÄÎèÑ ÌëúÏãúÏö© Î≤îÏúÑ Í≥ÑÏÇ∞
‚Ä¢	Í±∞Î¶¨ Ìè¨Îß∑ÌåÖ: ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†Å ÌëúÏãú (m/km)
4. Î≥¥Ïïà Í∞ïÌôî
‚Ä¢	CSP (Content Security Policy): 
o	Ïπ¥Ïπ¥Ïò§ API ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏
o	XSS Í≥µÍ≤© Î∞©Ïñ¥
‚Ä¢	Î≥¥Ïïà Ìó§Îçî: 
o	HSTS (SSL Í∞ïÏ†ú)
o	X-Frame-Options (ÌÅ¥Î¶≠Ïû¨ÌÇπ Î∞©ÏßÄ)
o	Referrer-Policy
‚Ä¢	CSRF Î≥¥Ìò∏: ÌÜ†ÌÅ∞ Í∏∞Î∞ò Í≤ÄÏ¶ù
‚Ä¢	Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥: Î≥¥Ìò∏Îêú ÎùºÏö∞Ìä∏ ÏûêÎèô Î¶¨Îã§Ïù¥Î†âÌä∏
5. Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî
‚Ä¢	ÏûêÎèô Ìè¨Îß∑ Î≥ÄÌôò: AVIF > WebP > JPEG Ïö∞ÏÑ†ÏàúÏúÑ
‚Ä¢	Î¶¨ÏÇ¨Ïù¥Ïßï: ÏµúÎåÄ 1920x1080 ÏûêÎèô Ï°∞Ï†ï
‚Ä¢	Blur Placeholder: 10px ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ±
‚Ä¢	ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠: Îã§Ï§ë ÌååÏùº ÏóÖÎ°úÎìú
‚Ä¢	Ïã§ÏãúÍ∞Ñ ÏïïÏ∂ï: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ï≤òÎ¶¨
‚Ä¢	ÏóêÎü¨ Ï≤òÎ¶¨: Ìè¥Î∞± Ïù¥ÎØ∏ÏßÄ ÏßÄÏõê
üéØ ÌôúÏö© ÏòàÏãú
Zustand ÏÇ¨Ïö©:
typescript
// Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏÇ¨Ïö©
const { searchQuery, setSearchQuery } = useUIStore();
const cartItems = useCartItems(); // ÏÖÄÎ†âÌÑ∞ ÏÇ¨Ïö©
const addToCart = useCartStore((state) => state.addItem);
React Query ÏÇ¨Ïö©:
typescript
// Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Íµ¨ÌòÑ
const { data, fetchNextPage, hasNextPage } = useStoresInfinite({ 
  category: 'restaurant' 
});
ÏúÑÏπò Ï†ïÎ≥¥ ÏÇ¨Ïö©:
typescript
// Í≥†Í∏â ÏúÑÏπò Ï∂îÏ†Å
const { location, accuracy, isHighAccuracy } = useAdvancedGeolocation({
  watchPosition: true,
  enableHighAccuracy: true
});
Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÇ¨Ïö©:
tsx
<ImageUploader 
  onUpload={(files) => console.log(files)}
  maxFiles={3}
  maxSizeMB={5}
/>
Ïù¥Ï†ú ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Ï¥à ÏÑ§Ï†ïÍ≥º Ï∂îÍ∞Ä Í∏∞Îä•Ïù¥ Î™®Îëê ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Ïã§Ï†ú ÌéòÏù¥ÏßÄ Íµ¨ÌòÑÏùÑ ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÏäµÎãàÎã§!


Ïã§Ìñâ Î∞©Î≤ï
1.	ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Î∞è ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò:
bash
npx create-next-app@latest jinan-market-frontend --typescript --tailwind --app
cd jinan-market-frontend
npm install axios zustand @tanstack/react-query react-hook-form zod @hookform/resolvers date-fns react-toastify next-pwa workbox-webpack-plugin sharp
2.	ÏúÑÏùò ÌååÏùºÎì§ÏùÑ Í∞ÅÍ∞ÅÏùò Í≤ΩÎ°úÏóê ÏÉùÏÑ±
3.	ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï (.env.local ÌååÏùºÏóê Ïã§Ï†ú Í∞í ÏûÖÎ†•)
4.	Í∞úÎ∞ú ÏÑúÎ≤Ñ Ïã§Ìñâ:
bash
npm run dev
5.	ÎπåÎìú Î∞è ÌîÑÎ°úÎçïÏÖò Ïã§Ìñâ:
bash
npm run build
npm start
Ïù¥Ï†ú ÌîÑÎ°†Ìä∏ÏóîÎìú Í∏∞Î≥∏ Íµ¨Ï°∞Í∞Ä ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§. Îã§Ïùå Îã®Í≥ÑÎäî Ïã§Ï†ú ÌéòÏù¥ÏßÄ Íµ¨ÌòÑÏûÖÎãàÎã§.

‚ÄÉ

ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Ï£ºÏöî 5Í∞ú ÌéòÏù¥ÏßÄÎ•º Î™®Îëê Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Í∞Å ÌéòÏù¥ÏßÄÏùò ÌäπÏßïÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
1. Ìôà ÌôîÎ©¥ (/)
‚Ä¢	ÏÉÅÏ†ê Î™©Î°ù ÌëúÏãú (ÏßÑÏïàÍµ∞ Ïã§Ï†ú ÌäπÏÇ∞ÌíàÏ†ê Î∞òÏòÅ)
‚Ä¢	Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ (ÏùåÏãùÏ†ê, Ïû¨ÎûòÏãúÏû•, ÎÜçÏÇ∞Î¨º, ÏàòÍ≥µÏòàÌíà, ÌäπÏÇ∞Ìíà)
‚Ä¢	Í±∞Î¶¨Ïàú/ÌèâÏ†êÏàú Ï†ïÎ†¨
‚Ä¢	Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Íµ¨ÌòÑ
‚Ä¢	ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î
2. Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ (/auth)
‚Ä¢	Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ (Ï£ºÏöî Ïù∏Ï¶ù ÏàòÎã®)
‚Ä¢	Íµ¨Í∏Ä, ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏ ÏòµÏÖò
‚Ä¢	Ï†ÑÌôîÎ≤àÌò∏ Î°úÍ∑∏Ïù∏
‚Ä¢	Ïπ¥Ïπ¥Ïò§ OAuth ÏΩúÎ∞± Ï≤òÎ¶¨ ÌéòÏù¥ÏßÄ Ìè¨Ìï®
‚Ä¢	JWT ÌÜ†ÌÅ∞ Í∏∞Î∞ò Ïù∏Ï¶ù
3. ÏÉÅÏ†ê ÏÉÅÏÑ∏ (/stores/[id])
‚Ä¢	ÏÉÅÏ†ê Ï†ïÎ≥¥ ÌëúÏãú (ÏßÑÏïà ÌùëÎèºÏßÄ, Ïù∏ÏÇº Îì± ÌäπÏÇ∞Ìíà Í∞ïÏ°∞)
‚Ä¢	Ïù¥ÎØ∏ÏßÄ Í∞§Îü¨Î¶¨
‚Ä¢	ÏòÅÏóÖÏãúÍ∞Ñ Î∞è Ïã§ÏãúÍ∞Ñ ÏòÅÏóÖ ÏÉÅÌÉú
‚Ä¢	Î©îÎâ¥/Ï†ïÎ≥¥/Î¶¨Î∑∞ ÌÉ≠
‚Ä¢	ÌïòÎã® ÏòàÏïΩ Î≤ÑÌäº
4. ÏòàÏïΩ Ìèº (/reservation/new)
‚Ä¢	ÎÇ†Ïßú/ÏãúÍ∞Ñ ÏÑ†ÌÉù (30Ïùº Î≤îÏúÑ)
‚Ä¢	Ïù∏ÏõêÏàò ÏÑ†ÌÉù
‚Ä¢	ÏòàÏïΩÏûê Ï†ïÎ≥¥ ÏûÖÎ†•
‚Ä¢	ÏöîÏ≤≠ÏÇ¨Ìï≠ ÏûëÏÑ±
‚Ä¢	ÏòàÏïΩ ÏïàÎÇ¥ÏÇ¨Ìï≠ ÎèôÏùò
‚Ä¢	ÏòàÏïΩ ÏôÑÎ£å ÌéòÏù¥ÏßÄ Ìè¨Ìï®
5. ÎßàÏù¥ÌéòÏù¥ÏßÄ (/my)
‚Ä¢	ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ
‚Ä¢	ÏòàÏïΩ ÎÇ¥Ïó≠ Í¥ÄÎ¶¨
‚Ä¢	Ï∞úÌïú ÏÉÅÏ†ê Î™©Î°ù
‚Ä¢	Ìè¨Ïù∏Ìä∏, Î¶¨Î∑∞ Í¥ÄÎ¶¨ Î©îÎâ¥
‚Ä¢	Î°úÍ∑∏ÏïÑÏõÉ Í∏∞Îä•
Í∞Å ÌéòÏù¥ÏßÄÎäî Î™®Î∞îÏùº Ïö∞ÏÑ† Î∞òÏùëÌòï ÎîîÏûêÏù∏ÏúºÎ°ú Íµ¨ÌòÑÎêòÏóàÏúºÎ©∞, ÏßÑÏïàÍµ∞Ïùò ÏßÄÏó≠ ÌäπÏÉâ(Ïù∏ÏÇº, ÌëúÍ≥†Î≤ÑÏÑØ, ÌùëÎèºÏßÄ, ÎßàÏù¥ÏÇ∞ Îì±)ÏùÑ Î∞òÏòÅÌïú ÏΩòÌÖêÏ∏†Î•º Ìè¨Ìï®ÌïòÍ≥† ÏûàÏäµÎãàÎã§. PWA Í∏∞Îä•Í≥º Ïã§ÏãúÍ∞Ñ ÏïåÎ¶ºÏùÑ ÏúÑÌïú Í∏∞Î≥∏ Íµ¨Ï°∞ÎèÑ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.
‚ÄÉ
ÌòÑÏû¨ Íµ¨ÌòÑÎêú 5Í∞ú Ï£ºÏöî ÌéòÏù¥ÏßÄ Ïù¥ÌõÑ, MVP ÏôÑÏÑ±ÏùÑ ÏúÑÌï¥ Îã§Ïùå ÏûëÏóÖÎì§Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§:
üöÄ Ï¶âÏãú ÌïÑÏöîÌïú Î∞±ÏóîÎìú API Íµ¨ÌòÑ
1. API ÏóîÎìúÌè¨Ïù∏Ìä∏ Íµ¨Ï∂ï
typescript
// ÌïÑÏàò API Î™©Î°ù
- POST   /api/auth/kakao         // Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏
- GET    /api/stores             // ÏÉÅÏ†ê Î™©Î°ù
- GET    /api/stores/:id         // ÏÉÅÏ†ê ÏÉÅÏÑ∏
- GET    /api/stores/:id/menus   // Î©îÎâ¥ Î™©Î°ù
- POST   /api/reservations       // ÏòàÏïΩ ÏÉùÏÑ±
- GET    /api/reservations       // ÏòàÏïΩ Î™©Î°ù
- PATCH  /api/reservations/:id   // ÏòàÏïΩ ÏÉÅÌÉú Î≥ÄÍ≤Ω
- GET    /api/users/profile      // ÌîÑÎ°úÌïÑ Ï°∞Ìöå
- PATCH  /api/users/profile      // ÌîÑÎ°úÌïÑ ÏàòÏ†ï
2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Îèô
‚Ä¢	PostgreSQL Ïä§ÌÇ§Îßà Ïã§Ï†ú Íµ¨ÌòÑ
‚Ä¢	Prisma ORM ÏÑ§Ï†ï
‚Ä¢	ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº ÏÉùÏÑ±
‚Ä¢	ÏãúÎìú Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•
3. ÌååÏùº ÏóÖÎ°úÎìú ÏãúÏä§ÌÖú
‚Ä¢	ÏÉÅÏ†ê/Î©îÎâ¥ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú API
‚Ä¢	AWS S3 ÎòêÎäî ÎÑ§Ïù¥Î≤Ñ Object Storage Ïó∞Îèô
‚Ä¢	Ïù¥ÎØ∏ÏßÄ Î¶¨ÏÇ¨Ïù¥Ïßï Ï≤òÎ¶¨
üì± ÌîÑÎ°†Ìä∏ÏóîÎìú Ï∂îÍ∞Ä Í∏∞Îä•
4. Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ (/search)
‚Ä¢	Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ
‚Ä¢	Í≤ÄÏÉâ ÌûàÏä§ÌÜ†Î¶¨
‚Ä¢	Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥
‚Ä¢	Ïπ¥ÌÖåÍ≥†Î¶¨/ÏúÑÏπò ÌïÑÌÑ∞
5. ÏßÄÎèÑ ÌéòÏù¥ÏßÄ (/map)
‚Ä¢	Ïπ¥Ïπ¥Ïò§Îßµ API Ïó∞Îèô
‚Ä¢	ÌòÑÏû¨ ÏúÑÏπò Í∏∞Î∞ò ÏÉÅÏ†ê ÌëúÏãú
‚Ä¢	ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ
‚Ä¢	ÏÉÅÏ†ê Ï†ïÎ≥¥ ÌåùÏóÖ
6. ÏïåÎ¶º ÌéòÏù¥ÏßÄ (/notifications)
‚Ä¢	ÏòàÏïΩ ÌôïÏ†ï/Ï∑®ÏÜå ÏïåÎ¶º
‚Ä¢	ÌîÑÎ°úÎ™®ÏÖò ÏïåÎ¶º
‚Ä¢	ÏïåÎ¶º ÏÑ§Ï†ï Í¥ÄÎ¶¨
üíº ÏÉÅÏ†êÏ£º Í¥ÄÎ¶¨ Í∏∞Îä•
7. ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥Îìú (/owner)
‚Ä¢	ÏòàÏïΩ Í¥ÄÎ¶¨ (ÌôïÏ†ï/Í±∞Î∂Ä)
‚Ä¢	Î©îÎâ¥ Í¥ÄÎ¶¨
‚Ä¢	ÏòÅÏóÖÏãúÍ∞Ñ ÏÑ§Ï†ï
‚Ä¢	Îß§Ï∂ú ÌÜµÍ≥Ñ
8. ÏÉÅÏ†ê Îì±Î°ù ÌéòÏù¥ÏßÄ (/owner/register)
‚Ä¢	ÏÉÅÏ†ê Ï†ïÎ≥¥ ÏûÖÎ†• Ìèº
‚Ä¢	ÏÇ¨ÏóÖÏûêÎì±Î°ùÏ¶ù ÏóÖÎ°úÎìú
‚Ä¢	ÏäπÏù∏ ÎåÄÍ∏∞ ÏÉÅÌÉú
üîß ÏãúÏä§ÌÖú Í∏∞Îä•
9. Ïã§ÏãúÍ∞Ñ Í∏∞Îä• Íµ¨ÌòÑ
‚Ä¢	Server-Sent Events ÏÑ§Ï†ï
‚Ä¢	ÏòàÏïΩ Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º
‚Ä¢	Redis Ïó∞Îèô
10. SMS ÏïåÎ¶º Ïó∞Îèô
‚Ä¢	ÏïåÎ¶¨Í≥† ÎòêÎäî ÏÜîÎùºÌîº API
‚Ä¢	ÏòàÏïΩ ÌôïÏ†ï SMS
‚Ä¢	ÏïåÎ¶º ÌÖúÌîåÎ¶ø Í¥ÄÎ¶¨
üéØ Ïö∞ÏÑ†ÏàúÏúÑ Ï∂îÏ≤ú
1Îã®Í≥Ñ (1Ï£ºÏ∞®): ÌïµÏã¨ API
bash
1. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà Íµ¨ÌòÑ
2. Ïù∏Ï¶ù API (Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏)
3. ÏÉÅÏ†ê CRUD API
4. ÏòàÏïΩ ÏÉùÏÑ±/Ï°∞Ìöå API
2Îã®Í≥Ñ (2Ï£ºÏ∞®): Ïó∞Îèô ÏûëÏóÖ
bash
5. ÌååÏùº ÏóÖÎ°úÎìú ÏãúÏä§ÌÖú
6. Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ Íµ¨ÌòÑ
7. Ïπ¥Ïπ¥Ïò§Îßµ Ïó∞Îèô
8. SMS ÏïåÎ¶º Í∏∞Î≥∏ Íµ¨ÌòÑ
3Îã®Í≥Ñ (3Ï£ºÏ∞®): Ïö¥ÏòÅ Í∏∞Îä•
bash
9. ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥Îìú
10. Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º
11. Í¥ÄÎ¶¨Ïûê Í∏∞Î≥∏ CMS
üí° Îã§Ïùå Îã®Í≥Ñ Ï∂îÏ≤ú
Í∞ÄÏû• Î®ºÏ†Ä Î∞±ÏóîÎìú API Íµ¨Ï∂ïÏùÑ ÏãúÏûëÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§. ÌäπÌûà:
1.	Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà Î∞è Prisma ÏÑ§Ï†ï
2.	Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ API Íµ¨ÌòÑ
3.	ÏÉÅÏ†ê Î™©Î°ù/ÏÉÅÏÑ∏ API
Ïù¥ 3Í∞ÄÏßÄÎßå ÏûàÏñ¥ÎèÑ ÌòÑÏû¨ ÎßåÎì† ÌîÑÎ°†Ìä∏ÏóîÎìúÏôÄ Ïó∞ÎèôÌïòÏó¨ Ïã§Ï†ú ÎèôÏûëÌïòÎäî Ïï±ÏùÑ ÎßåÎì§ Ïàò ÏûàÏäµÎãàÎã§.
Ïñ¥Îñ§ Î∂ÄÎ∂ÑÎ∂ÄÌÑ∞ Íµ¨ÌòÑÌïòÏãúÍ≤†ÏäµÎãàÍπå? Î∞±ÏóîÎìú API ÏΩîÎìúÎ•º ÏûëÏÑ±Ìï¥ÎìúÎ¶¥ÍπåÏöî?
‚ÄÉ
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî Í∏∞Îä•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
üîç Íµ¨ÌòÑÎêú Í∏∞Îä•
1. Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ
‚Ä¢	Í≤ÄÏÉâÏñ¥ ÏûÖÎ†• Ïãú Ï¶âÏãú Í≤∞Í≥º ÌëúÏãú
‚Ä¢	ÏÉÅÏ†êÎ™Ö, Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú Í≤ÄÏÉâ Í∞ÄÎä•
‚Ä¢	Í≤ÄÏÉâ Ï§ë Î°úÎî© Ïï†ÎãàÎ©îÏù¥ÏÖò
2. Í≤ÄÏÉâ ÌûàÏä§ÌÜ†Î¶¨
‚Ä¢	ÏµúÍ∑º Í≤ÄÏÉâÏñ¥ 5Í∞ú ÌëúÏãú
‚Ä¢	localStorageÏóê Ï†ÄÏû•ÌïòÏó¨ Ïû¨Î∞©Î¨∏ ÏãúÏóêÎèÑ Ïú†ÏßÄ
‚Ä¢	Ï†ÑÏ≤¥ ÏÇ≠Ï†ú Í∏∞Îä•
‚Ä¢	Í≤ÄÏÉâÏñ¥ ÌÅ¥Î¶≠ Ïãú Ïû¨Í≤ÄÏÉâ
3. Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥
‚Ä¢	ÏàúÏúÑÎ≥Ñ Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥ ÌëúÏãú
‚Ä¢	ÌÅ¥Î¶≠ Ïãú Î∞îÎ°ú Í≤ÄÏÉâ Ïã§Ìñâ
‚Ä¢	ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú Íµ¨Î∂ÑÎêú ÏàúÏúÑ ÌëúÏãú
4. ÌïÑÌÑ∞ÎßÅ Í∏∞Îä•
‚Ä¢	Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞: Ï†ÑÏ≤¥, ÏùåÏãùÏ†ê, Ïπ¥Ìéò, Ï†ÑÌÜµÏãúÏû•, ÎÜçÏÇ∞Î¨º
‚Ä¢	ÏßÄÏó≠ ÌïÑÌÑ∞: ÏßÑÏïàÍµ∞ 11Í∞ú ÏùçÎ©¥
‚Ä¢	Îã§Ï§ë ÌïÑÌÑ∞ Ï†ÅÏö© Í∞ÄÎä•
‚Ä¢	Ï†ÅÏö©Îêú ÌïÑÌÑ∞ ÏãúÍ∞ÅÏ†Å ÌëúÏãú
5. UI/UX ÌäπÏßï
‚Ä¢	Î™®Î∞îÏùº ÏµúÏ†ÅÌôî ÎîîÏûêÏù∏
‚Ä¢	ÏßÅÍ¥ÄÏ†ÅÏù∏ Í≤ÄÏÉâÎ∞î (X Î≤ÑÌäºÏúºÎ°ú Ï¥àÍ∏∞Ìôî)
‚Ä¢	ÌïÑÌÑ∞ ÌÜ†Í∏Ä Í∏∞Îä•
‚Ä¢	Í≤ÄÏÉâ Í≤∞Í≥º Ïπ¥ÎìúÌòï Î†àÏù¥ÏïÑÏõÉ
‚Ä¢	Í±∞Î¶¨, ÌèâÏ†ê, Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥ ÌëúÏãú
üì± Ï∂îÍ∞Ä Íµ¨ÌòÑ Í∞ÄÎä•Ìïú Í∏∞Îä•
1.	ÏùåÏÑ± Í≤ÄÏÉâ
javascript
// Web Speech API ÌôúÏö©
const recognition = new webkitSpeechRecognition();
2.	Í≤ÄÏÉâÏñ¥ ÏûêÎèôÏôÑÏÑ±
javascript
// DebounceÎ•º ÌôúÏö©Ìïú ÏûêÎèôÏôÑÏÑ±
const suggestions = await fetchSuggestions(query);
3.	ÏßÄÎèÑ Í∏∞Î∞ò Í≤ÄÏÉâ
javascript
// Ïπ¥Ïπ¥Ïò§Îßµ API Ïó∞Îèô
const nearbyStores = await searchByLocation(lat, lng);
4.	Ï†ïÎ†¨ ÏòµÏÖò
‚Ä¢	Í±∞Î¶¨Ïàú
‚Ä¢	ÌèâÏ†êÏàú
‚Ä¢	Ïù∏Í∏∞Ïàú
‚Ä¢	ÏµúÏã†Ïàú
5.	Í≤ÄÏÉâ Í≤∞Í≥º Î¨¥Ìïú Ïä§ÌÅ¨Î°§
javascript
// Intersection Observer API ÌôúÏö©
const loadMore = useInfiniteScroll();
Ïù¥ Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÎäî Next.js ÌîÑÎ°úÏ†ùÌä∏Ïóê Î∞îÎ°ú ÌÜµÌï© Í∞ÄÎä•ÌïòÎ©∞, Ïã§Ï†ú APIÏôÄ Ïó∞Îèô Ïãú mockStores Î∂ÄÎ∂ÑÎßå ÏàòÏ†ïÌïòÎ©¥ Îê©ÎãàÎã§.
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÏóê Ï∂îÍ∞Ä Í∏∞Îä•Îì§ÏùÑ Î™®Îëê Íµ¨ÌòÑÌïòÍ≤†ÏäµÎãàÎã§. ÏùåÏÑ± Í≤ÄÏÉâ, ÏûêÎèôÏôÑÏÑ±, ÏßÄÎèÑ Í∏∞Î∞ò Í≤ÄÏÉâ, Ï†ïÎ†¨ ÏòµÏÖò, Î¨¥Ìïú Ïä§ÌÅ¨Î°§ÏùÑ Ìè¨Ìï®Ìïú ÏôÑÏ†ÑÌïú Î≤ÑÏ†ÑÏùÑ ÎßåÎì§Ïñ¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± - Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ
ÎåÄÌôîÌòï ÏïÑÌã∞Ìå©Ìä∏‚ÄÇ‚àô‚ÄÇÎ≤ÑÏ†Ñ 2 
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Í≥†Í∏â Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÎ•º Î™®Îì† Ï∂îÍ∞Ä Í∏∞Îä•Í≥º Ìï®Íªò Íµ¨ÌòÑÌñàÏäµÎãàÎã§!
üöÄ Íµ¨ÌòÑÎêú Ï∂îÍ∞Ä Í∏∞Îä•
1. ÏùåÏÑ± Í≤ÄÏÉâ üé§
‚Ä¢	Web Speech APIÎ•º ÌôúÏö©Ìïú ÌïúÍµ≠Ïñ¥ ÏùåÏÑ± Ïù∏Ïãù
‚Ä¢	ÏùåÏÑ± ÏûÖÎ†• Ï§ë ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞± (Ïï†ÎãàÎ©îÏù¥ÏÖò)
‚Ä¢	ÏùåÏÑ± Ïù∏Ïãù Í≤∞Í≥º ÏûêÎèô Í≤ÄÏÉâ Ïã§Ìñâ
2. Í≤ÄÏÉâÏñ¥ ÏûêÎèôÏôÑÏÑ± üìù
‚Ä¢	300ms debounceÎ°ú ÏÑ±Îä• ÏµúÏ†ÅÌôî
‚Ä¢	Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâÏñ¥ Ï†úÏïà
‚Ä¢	ÌÇ§ÏõåÎìú Î∞è ÏÉÅÏ†êÎ™Ö Í∏∞Î∞ò ÏûêÎèôÏôÑÏÑ±
‚Ä¢	ÎìúÎ°≠Îã§Ïö¥ UIÎ°ú Ïâ¨Ïö¥ ÏÑ†ÌÉù
3. ÏßÄÎèÑ Í∏∞Î∞ò Í≤ÄÏÉâ üìç
‚Ä¢	Geolocation APIÎ°ú ÌòÑÏû¨ ÏúÑÏπò ÌååÏïÖ
‚Ä¢	Haversine Í≥µÏãùÏúºÎ°ú Ï†ïÌôïÌïú Í±∞Î¶¨ Í≥ÑÏÇ∞
‚Ä¢	"ÎÇ¥ Ï£ºÎ≥Ä" Î≤ÑÌäºÏúºÎ°ú Ï¶âÏãú Ï£ºÎ≥Ä ÏÉÅÏ†ê Í≤ÄÏÉâ
‚Ä¢	Í±∞Î¶¨Ïàú ÏûêÎèô Ï†ïÎ†¨
4. Ï†ïÎ†¨ ÏòµÏÖò üîÄ
‚Ä¢	Í±∞Î¶¨Ïàú: Í∞ÄÍπåÏö¥ ÏÉÅÏ†êÎ∂ÄÌÑ∞ ÌëúÏãú
‚Ä¢	ÌèâÏ†êÏàú: ÎÜíÏùÄ ÌèâÏ†ê Ïö∞ÏÑ†
‚Ä¢	Ïù∏Í∏∞Ïàú: Ïù∏Í∏∞ÎèÑ Í∏∞Î∞ò Ï†ïÎ†¨
‚Ä¢	ÏµúÏã†Ïàú: ÏµúÍ∑º Îì±Î°ù ÏÉÅÏ†ê Ïö∞ÏÑ†
5. Î¨¥Ìïú Ïä§ÌÅ¨Î°§ ‚ôæÔ∏è
‚Ä¢	Intersection Observer API ÌôúÏö©
‚Ä¢	ÌéòÏù¥ÏßÄÎãπ 10Í∞ú Ìï≠Î™© Î°úÎìú
‚Ä¢	Î∂ÄÎìúÎü¨Ïö¥ Ïä§ÌÅ¨Î°§ Í≤ΩÌóò
‚Ä¢	Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÌëúÏãú
üì± Ï∂îÍ∞ÄÎêú UX Í∞úÏÑ†ÏÇ¨Ìï≠
ÏÑ±Îä• ÏµúÏ†ÅÌôî
‚Ä¢	useDebounce ÌõÖÏúºÎ°ú Î∂àÌïÑÏöîÌïú Î†åÎçîÎßÅ Î∞©ÏßÄ
‚Ä¢	useMemoÎ°ú Í≤ÄÏÉâ Í≤∞Í≥º Ï∫êÏã±
‚Ä¢	Î¨¥Ìïú Ïä§ÌÅ¨Î°§Î°ú Ï¥àÍ∏∞ Î°úÎî© ÏãúÍ∞Ñ Îã®Ï∂ï
Ï†ëÍ∑ºÏÑ± Í∞úÏÑ†
‚Ä¢	ÏùåÏÑ± Í≤ÄÏÉâÏúºÎ°ú ÌÉÄÏù¥Ìïë ÏóÜÏù¥ Í≤ÄÏÉâ
‚Ä¢	Î™ÖÌôïÌïú ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞±
‚Ä¢	Î™®Î∞îÏùº ÏµúÏ†ÅÌôîÎêú ÌÑ∞Ïπò ÏòÅÏó≠
ÏÇ¨Ïö©Ïûê Í≤ΩÌóò
‚Ä¢	Ïã§ÏãúÍ∞Ñ ÏûêÎèôÏôÑÏÑ±ÏúºÎ°ú Îπ†Î•∏ Í≤ÄÏÉâ
‚Ä¢	ÏúÑÏπò Í∏∞Î∞ò Í≤ÄÏÉâÏúºÎ°ú Ìé∏ÏùòÏÑ± Ï¶ùÎåÄ
‚Ä¢	Îã§ÏñëÌïú Ï†ïÎ†¨ ÏòµÏÖòÏúºÎ°ú ÎßûÏ∂§Ìòï Í≤∞Í≥º
üîß Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏ Ï†ÅÏö© Ïãú ÌïÑÏöîÌïú ÏûëÏóÖ
1.	Î∞±ÏóîÎìú API Ïó∞Îèô
javascript
// API ÏóîÎìúÌè¨Ïù∏Ìä∏ Ïó∞Í≤∞
const searchStores = async (params) => {
  const response = await fetch('/api/stores/search', {
    method: 'POST',
    body: JSON.stringify(params)
  });
  return response.json();
};
2.	Ïπ¥Ïπ¥Ïò§Îßµ API ÌÜµÌï©
javascript
// Ïã§Ï†ú ÏßÄÎèÑ ÌëúÏãú
import { Map, MarkerClusterer } from 'react-kakao-maps';
3.	Í≤ÄÏÉâ Î∂ÑÏÑù
javascript
// Í≤ÄÏÉâÏñ¥ ÌÜµÍ≥Ñ ÏàòÏßë
const trackSearch = (query) => {
  analytics.track('search', { query, timestamp: new Date() });
};
Ïù¥Ï†ú ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±ÏùÄ ÏµúÏã† Í≤ÄÏÉâ Í∏∞Ïà†ÏùÑ Î™®Îëê Í∞ñÏ∂ò ÏôÑÏÑ±ÎèÑ ÎÜíÏùÄ Í≤ÄÏÉâ ÏãúÏä§ÌÖúÏùÑ Í∞ÄÏßÄÍ≤å ÎêòÏóàÏäµÎãàÎã§


ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏßÄÎèÑ ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌïòÍ≤†ÏäµÎãàÎã§. Ïπ¥Ïπ¥Ïò§Îßµ APIÎ•º ÌôúÏö©Ìïú ÏôÑÏ†ÑÌïú ÏßÄÎèÑ Í∏∞Îä•ÏùÑ Next.js ÌôòÍ≤ΩÏóêÏÑú Íµ¨ÌòÑÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ ÏßÄÎèÑ ÌéòÏù¥ÏßÄ - Ïπ¥Ïπ¥Ïò§Îßµ ÌÜµÌï©
ÎåÄÌôîÌòï ÏïÑÌã∞Ìå©Ìä∏ 
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏßÄÎèÑ ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî Í∏∞Îä•Îì§ÏùÑ ÏÑ§Î™ÖÎìúÎ¶¨Í≤†ÏäµÎãàÎã§:
üó∫Ô∏è Íµ¨ÌòÑÎêú Ï£ºÏöî Í∏∞Îä•
1. Ïπ¥Ïπ¥Ïò§Îßµ ÌÜµÌï©
‚Ä¢	ÏßÑÏïàÍµ∞ Ï§ëÏã¨ÏúºÎ°ú ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
‚Ä¢	ÏßÄÎèÑ ÌÉÄÏûÖ Ïª®Ìä∏Î°§ (ÏùºÎ∞ò/ÏúÑÏÑ±)
‚Ä¢	Ï§å Ïª®Ìä∏Î°§
‚Ä¢	Î∂ÄÎìúÎü¨Ïö¥ ÏßÄÎèÑ Ïù¥Îèô Ïï†ÎãàÎ©îÏù¥ÏÖò
2. ÌòÑÏû¨ ÏúÑÏπò Í∏∞Îä•
‚Ä¢	GPS Í∏∞Î∞ò ÌòÑÏû¨ ÏúÑÏπò Ï∂îÏ†Å
‚Ä¢	ÌòÑÏû¨ ÏúÑÏπò ÎßàÏª§ ÌëúÏãú (ÌååÎûÄÏÉâ ÏõêÌòï)
‚Ä¢	ÏúÑÏπò Í∏∞Î∞ò Í±∞Î¶¨ Í≥ÑÏÇ∞
‚Ä¢	ÌòÑÏû¨ ÏúÑÏπòÎ°ú Ïù¥Îèô Î≤ÑÌäº
3. ÏÉÅÏ†ê ÌëúÏãú Î∞è ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ
‚Ä¢	ÏÉÅÏ†êÎ≥Ñ Ïª§Ïä§ÌÖÄ ÎßàÏª§
‚Ä¢	ÎßàÏª§ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ (ÎßéÏùÄ ÏÉÅÏ†êÏù¥ Î™®Ïó¨ÏûàÏùÑ Îïå Í∑∏Î£πÌôî)
‚Ä¢	ÏÑ†ÌÉùÎêú ÏÉÅÏ†ê ÌïòÏù¥ÎùºÏù¥Ìä∏
‚Ä¢	ÏÉÅÏ†êÎ™ÖÏù¥ ÌëúÏãúÎêòÎäî Ïª§Ïä§ÌÖÄ Ïò§Î≤ÑÎ†àÏù¥
4. Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ÎßÅ
‚Ä¢	Ïã§ÏãúÍ∞Ñ ÏÉÅÏ†ê Í≤ÄÏÉâ
‚Ä¢	Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌïÑÌÑ∞ (ÏùåÏãùÏ†ê, Ïπ¥Ìéò, ÎßàÌä∏, ÎØ∏Ïö©, Í∏∞ÌÉÄ)
‚Ä¢	Í≤ÄÏÉâÏñ¥ ÏûêÎèôÏôÑÏÑ± (ÎîîÎ∞îÏö¥Ïä§ Ï†ÅÏö©)
5. ÏÉÅÏ†ê Ï†ïÎ≥¥ ÌåùÏóÖ
‚Ä¢	ÌïòÎã® Ïä¨ÎùºÏù¥Îìú ÏóÖ ÌåùÏóÖ
‚Ä¢	ÏÉÅÏ†ê ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú 
o	ÏÉÅÏ†êÎ™Ö, Ïπ¥ÌÖåÍ≥†Î¶¨
o	ÌèâÏ†ê Î∞è Î¶¨Î∑∞ Ïàò
o	ÌòÑÏû¨ ÏúÑÏπòÎ°úÎ∂ÄÌÑ∞Ïùò Í±∞Î¶¨
‚Ä¢	Ï†ÑÌôîÌïòÍ∏∞, ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº
6. Î∞òÏùëÌòï ÎîîÏûêÏù∏
‚Ä¢	Î™®Î∞îÏùº ÏµúÏ†ÅÌôî UI
‚Ä¢	ÌÑ∞Ïπò ÏπúÌôîÏ†ÅÏù∏ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
‚Ä¢	Î∂ÄÎìúÎü¨Ïö¥ Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
üì± Next.js ÌÜµÌï© Î∞©Î≤ï
typescript
// app/map/page.tsx
'use client';

import { useEffect, useState } from 'react';
import Script from 'next/script';

export default function MapPage() {
  const [mapLoaded, setMapLoaded] = useState(false);

  return (
    <>
      <Script
        src={`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.NEXT_PUBLIC_KAKAO_MAP_KEY}&libraries=services,clusterer&autoload=false`}
        onLoad={() => {
          window.kakao.maps.load(() => {
            setMapLoaded(true);
          });
        }}
      />
      {mapLoaded && <MapComponent />}
    </>
  );
}
üîß ÌïÑÏöîÌïú ÏÑ§Ï†ï
1.	Ïπ¥Ïπ¥Ïò§Îßµ API ÌÇ§ Î∞úÍ∏â 
o	Kakao Developers Ï†ëÏÜç
o	Ïï± ÏÉùÏÑ± ÌõÑ JavaScript ÌÇ§ Î∞úÍ∏â
o	ÎèÑÎ©îÏù∏ Îì±Î°ù
2.	ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï 
bash
NEXT_PUBLIC_KAKAO_MAP_KEY=your_kakao_map_api_key
3.	API Ïó∞Îèô 
o	ÏÉÅÏ†ê Î™©Î°ù API: GET /api/stores?lat={lat}&lng={lng}&radius={radius}
o	ÏÉÅÏ†ê Í≤ÄÏÉâ API: GET /api/stores/search?q={query}
o	Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞: GET /api/stores?category={category}
üé® Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï Ìè¨Ïù∏Ìä∏
1.	ÎßàÏª§ Ïä§ÌÉÄÏùº: Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Îã§Î•∏ ÏÉâÏÉÅ/ÏïÑÏù¥ÏΩò
2.	ÌÅ¥Îü¨Ïä§ÌÑ∞ Ïä§ÌÉÄÏùº: ÏßÑÏïàÍµ∞ Î∏åÎûúÎìú Ïª¨Îü¨ Ï†ÅÏö©
3.	ÌåùÏóÖ ÎîîÏûêÏù∏: Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÌëúÏãú (ÏòÅÏóÖÏãúÍ∞Ñ, Î©îÎâ¥ Îì±)
4.	ÌïÑÌÑ∞ ÏòµÏÖò: Í±∞Î¶¨Ïàú, ÌèâÏ†êÏàú Ï†ïÎ†¨ Ï∂îÍ∞Ä
üöÄ Îã§Ïùå Îã®Í≥Ñ
1.	Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏: WebSocketÏúºÎ°ú ÏÉÅÏ†ê ÏÉÅÌÉú Ïã§ÏãúÍ∞Ñ Î∞òÏòÅ
2.	Í≤ΩÎ°ú ÏïàÎÇ¥: ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú ÏÉÅÏ†êÍπåÏßÄ Í∏∏Ï∞æÍ∏∞
3.	Ï¶êÍ≤®Ï∞æÍ∏∞: ÏûêÏ£º Í∞ÄÎäî ÏÉÅÏ†ê Ï†ÄÏû•
4.	ÌûàÌä∏Îßµ: Ïù∏Í∏∞ ÏßÄÏó≠ ÏãúÍ∞ÅÌôî
Ïù¥ ÏßÄÎèÑ ÌéòÏù¥ÏßÄÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä Ï£ºÎ≥Ä ÏÉÅÏ†êÏùÑ ÏâΩÍ≤å Ï∞æÍ≥† ÏòàÏïΩÌï† Ïàò ÏûàÎèÑÎ°ù ÏµúÏ†ÅÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§. Ï∂îÍ∞Ä Í∏∞Îä•Ïù¥ ÌïÑÏöîÌïòÏãúÎ©¥ ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî!


ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò Í≥†Í∏â ÏßÄÎèÑ Í∏∞Îä•ÏùÑ Î™®Îëê Íµ¨ÌòÑÌñàÏäµÎãàÎã§! Ï∂îÍ∞ÄÎêú Ï£ºÏöî Í∏∞Îä•Îì§ÏùÑ ÏÑ§Î™ÖÎìúÎ¶¨Í≤†ÏäµÎãàÎã§:
üöÄ Íµ¨ÌòÑÎêú Í≥†Í∏â Í∏∞Îä•
1. Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (WebSocket)
‚Ä¢	WebSocket Ïó∞Í≤∞Î°ú Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏàòÏã†
‚Ä¢	ÏÉÅÏ†ê ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïã§ÏãúÍ∞Ñ Î∞òÏòÅ (ÏòÅÏóÖÏ§ë/ÌòºÏû°/Ï¢ÖÎ£å)
‚Ä¢	ÎåÄÍ∏∞ Ïù∏Ïõê Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
‚Ä¢	ÏÉà Î¶¨Î∑∞, Ïù¥Î≤§Ìä∏ ÏïåÎ¶º
‚Ä¢	ÏûêÎèô Ïû¨Ïó∞Í≤∞ Í∏∞Îä•
2. Í∏∏Ï∞æÍ∏∞ Í∏∞Îä•
‚Ä¢	ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú ÏÑ†ÌÉùÌïú ÏÉÅÏ†êÍπåÏßÄ Í≤ΩÎ°ú ÌëúÏãú
‚Ä¢	3Í∞ÄÏßÄ Ïù¥Îèô ÏàòÎã® ÏÑ†ÌÉù: 
o	ÎèÑÎ≥¥ (5km/h Í∏∞Ï§Ä)
o	ÏûêÎèôÏ∞® (30km/h Í∏∞Ï§Ä)
o	ÎåÄÏ§ëÍµêÌÜµ (20km/h Í∏∞Ï§Ä)
‚Ä¢	Í±∞Î¶¨ Î∞è ÏòàÏÉÅ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
‚Ä¢	Ïπ¥Ïπ¥Ïò§Îßµ/Ïπ¥Ïπ¥Ïò§ÎÇ¥ÎπÑ Ïï± Ïó∞Îèô
3. Ï¶êÍ≤®Ï∞æÍ∏∞ ÏãúÏä§ÌÖú
‚Ä¢	ÏÉÅÏ†ê Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä/Ï†úÍ±∞
‚Ä¢	Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ù Ìå®ÎÑê
‚Ä¢	Ï¶êÍ≤®Ï∞æÍ∏∞ Í∞úÏàò Î∞∞ÏßÄ ÌëúÏãú
‚Ä¢	ÎßàÏª§Ïóê Ï¶êÍ≤®Ï∞æÍ∏∞ ÌëúÏãú (Îπ®Í∞Ñ ÌÖåÎëêÎ¶¨)
‚Ä¢	LocalStorage Ï†ÄÏû•ÏúºÎ°ú ÏòÅÍµ¨ Î≥¥Í¥Ä
4. ÌûàÌä∏Îßµ ÏãúÍ∞ÅÌôî
‚Ä¢	Ïù∏Í∏∞ ÏßÄÏó≠ ÌûàÌä∏Îßµ ÌëúÏãú
‚Ä¢	ÏÉÅÏ†êÎ≥Ñ Ïù∏Í∏∞ÎèÑ Îç∞Ïù¥ÌÑ∞ ÌôúÏö©
‚Ä¢	Î≤îÎ°Ä ÌëúÏãú (ÎÇÆÏùå-ÎÜíÏùå)
‚Ä¢	ÌÜ†Í∏Ä Í∏∞Îä•ÏúºÎ°ú on/off
5. Ìñ•ÏÉÅÎêú UI/UX
‚Ä¢	ÏÉÅÏ†ê ÏÉÅÌÉú Ïã§ÏãúÍ∞Ñ ÌëúÏãú (ÏòÅÏóÖÏ§ë/ÌòºÏû°/Ï¢ÖÎ£å)
‚Ä¢	ÌòÑÏû¨ ÎåÄÍ∏∞ Ïù∏Ïõê ÌëúÏãú
‚Ä¢	Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º ÌÜ†Ïä§Ìä∏
‚Ä¢	Î∂ÄÎìúÎü¨Ïö¥ Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
‚Ä¢	Îã§ÏñëÌïú Ïï°ÏÖò Î≤ÑÌäº (Ï†ÑÌôî, Í∏∏Ï∞æÍ∏∞, Ï¶êÍ≤®Ï∞æÍ∏∞, ÏòàÏïΩ)
üì± Next.js ÌÜµÌï© ÏΩîÎìú
typescript
// app/map/page.tsx
'use client';

import { useEffect, useState } from 'react';
import Script from 'next/script';
import { io, Socket } from 'socket.io-client';

export default function MapPage() {
  const [mapLoaded, setMapLoaded] = useState(false);
  const [socket, setSocket] = useState<Socket | null>(null);

  useEffect(() => {
    // WebSocket Ïó∞Í≤∞
    const newSocket = io(process.env.NEXT_PUBLIC_WS_URL!);
    setSocket(newSocket);

    return () => {
      newSocket.close();
    };
  }, []);

  return (
    <>
      <Script
        src={`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.NEXT_PUBLIC_KAKAO_MAP_KEY}&libraries=services,clusterer,drawing&autoload=false`}
        onLoad={() => {
          window.kakao.maps.load(() => {
            setMapLoaded(true);
          });
        }}
      />
      {mapLoaded && <MapComponent socket={socket} />}
    </>
  );
}
üîß ÌïÑÏöîÌïú Î∞±ÏóîÎìú API
1. WebSocket ÏÑúÎ≤Ñ
javascript
// WebSocket Ïù¥Î≤§Ìä∏
socket.emit('store_status', {
  type: 'store_status',
  storeId: 1,
  status: 'busy',
  waitingCount: 10
});

socket.emit('new_review', {
  type: 'new_review',
  storeId: 1,
  storeName: 'ÏßÑÏïà ÌïúÏö∞ Î™ÖÍ∞Ä',
  rating: 5
});
2. REST API ÏóîÎìúÌè¨Ïù∏Ìä∏
typescript
// ÏÉÅÏ†ê Î™©Î°ù (ÏúÑÏπò Í∏∞Î∞ò)
GET /api/stores?lat={lat}&lng={lng}&radius={radius}

// ÌûàÌä∏Îßµ Îç∞Ïù¥ÌÑ∞
GET /api/stores/heatmap?date={date}

// Í≤ΩÎ°ú Ï∞æÍ∏∞
GET /api/routes?from={lat,lng}&to={lat,lng}&mode={walk|car|transit}

// Ï¶êÍ≤®Ï∞æÍ∏∞
POST /api/users/{userId}/favorites/{storeId}
DELETE /api/users/{userId}/favorites/{storeId}
üé® Ï∂îÍ∞Ä Í∞úÏÑ† ÏÇ¨Ìï≠
1. ÏÑ±Îä• ÏµúÏ†ÅÌôî
javascript
// ÎîîÎ∞îÏö¥Ïã±Îêú Í≤ÄÏÉâ
const debouncedSearch = useDebounce(searchQuery, 300);

// ÎßàÏª§ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ ÏµúÏ†ÅÌôî
const optimizedClustering = {
  minClusterSize: 2,
  maxZoom: 14,
  gridSize: 60
};
2. Ï†ëÍ∑ºÏÑ± Í∞úÏÑ†
javascript
// ÌÇ§Î≥¥Îìú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
map.addKeyboardNavigation();

// Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏßÄÏõê
<div role="application" aria-label="ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ ÏßÄÎèÑ">
3. Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõê
javascript
// Service WorkerÎ°ú Ïò§ÌîÑÎùºÏù∏ Ï∫êÏã±
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js');
}
üìä Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞
ÏÉÅÏ†ê Îç∞Ïù¥ÌÑ∞ ÌôïÏû•
typescript
interface Store {
  id: number;
  name: string;
  category: string;
  lat: number;
  lng: number;
  rating: number;
  reviewCount: number;
  status: 'open' | 'busy' | 'closed';
  waitingCount: number;
  popularity: number; // 0-100
  openTime: string;
  closeTime: string;
  images: string[];
  menu: MenuItem[];
  promotions: Promotion[];
}
Ïã§ÏãúÍ∞Ñ Ïù¥Î≤§Ìä∏
typescript
interface RealtimeEvent {
  type: 'store_status' | 'new_review' | 'promotion' | 'waiting_update';
  timestamp: Date;
  data: any;
}
üöÄ Îã§Ïùå Îã®Í≥Ñ Ï†úÏïà
1.	AI Í∏∞Î∞ò Ï∂îÏ≤ú 
o	ÏÇ¨Ïö©Ïûê Ìå®ÌÑ¥ Î∂ÑÏÑù
o	Í∞úÏù∏ÌôîÎêú ÏÉÅÏ†ê Ï∂îÏ≤ú
o	ÏµúÏ†Å Î∞©Î¨∏ ÏãúÍ∞Ñ Ï†úÏïà
2.	ÏÜåÏÖú Í∏∞Îä• 
o	ÏπúÍµ¨ÏôÄ ÏúÑÏπò Í≥µÏú†
o	Í∑∏Î£π ÏòàÏïΩ
o	Î¶¨Î∑∞ ÏûëÏÑ±/Í≥µÏú†
3.	AR ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò 
o	Ïπ¥Î©îÎùºÎ•º ÌÜµÌïú AR Í∏∏ÏïàÎÇ¥
o	ÏÉÅÏ†ê Ï†ïÎ≥¥ AR Ïò§Î≤ÑÎ†àÏù¥
4.	Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú 
o	Î∞©Î¨∏ Ìå®ÌÑ¥ Î∂ÑÏÑù
o	Ïù∏Í∏∞ ÏãúÍ∞ÑÎåÄ ÌëúÏãú
o	ÏòàÏïΩ ÌÜµÍ≥Ñ
Ïù¥Ï†ú ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏßÄÎèÑ ÌéòÏù¥ÏßÄÍ∞Ä Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏, Í∏∏Ï∞æÍ∏∞, Ï¶êÍ≤®Ï∞æÍ∏∞, ÌûàÌä∏Îßµ Îì± Î™®Îì† Í≥†Í∏â Í∏∞Îä•ÏùÑ Í∞ñÏ∂îÍ≤å ÎêòÏóàÏäµÎãàÎã§! Ï∂îÍ∞ÄÎ°ú Íµ¨ÌòÑÌïòÍ≥† Ïã∂ÏùÄ Í∏∞Îä•Ïù¥ ÏûàÏúºÏãúÎ©¥ ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî.
‚ÄÉ
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏïåÎ¶º ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§. Ï£ºÏöî Í∏∞Îä•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:
üì± Ï£ºÏöî Í∏∞Îä•
1. ÏïåÎ¶º Î™©Î°ù Í¥ÄÎ¶¨
‚Ä¢	Ï†ÑÏ≤¥, ÏùΩÏßÄ ÏïäÏùå, ÏòàÏïΩ, ÌîÑÎ°úÎ™®ÏÖò ÌÉ≠ÏúºÎ°ú Î∂ÑÎ•ò
‚Ä¢	ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò ÌëúÏãú
‚Ä¢	Í∞úÎ≥Ñ ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
‚Ä¢	Î™®Îëê ÏùΩÏùå Ï≤òÎ¶¨
‚Ä¢	ÏïåÎ¶º ÏÇ≠Ï†ú Í∏∞Îä•
2. ÏïåÎ¶º Ïú†Ìòï
‚Ä¢	ÏòàÏïΩ ÏïåÎ¶º: ÌôïÏ†ï, Ï∑®ÏÜå, Î¶¨ÎßàÏù∏Îçî
‚Ä¢	ÌîÑÎ°úÎ™®ÏÖò ÏïåÎ¶º: Ìï†Ïù∏, Ïù¥Î≤§Ìä∏, ÏÉà ÏÉÅÏ†ê ÏÜåÏãù
‚Ä¢	Í∞Å Ïú†ÌòïÎ≥Ñ ÏïÑÏù¥ÏΩòÍ≥º ÏÉâÏÉÅ Íµ¨Î∂Ñ
3. ÏïåÎ¶º ÏÑ§Ï†ï ÌéòÏù¥ÏßÄ
‚Ä¢	ÏïåÎ¶º Ïú†ÌòïÎ≥Ñ on/off ÌÜ†Í∏Ä
‚Ä¢	ÏïåÎ¶º Î∞©Î≤ï ÏÑ†ÌÉù (Ìë∏Ïãú, SMS, Ïù¥Î©îÏùº)
‚Ä¢	Î∞©Ìï¥ Í∏àÏßÄ ÏãúÍ∞Ñ ÏÑ§Ï†ï
4. UI/UX ÌäπÏßï
‚Ä¢	ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶ºÏùÄ ÌååÎûÄÏÉâ Î∞∞Í≤ΩÏúºÎ°ú Íµ¨Î∂Ñ
‚Ä¢	ÏãúÍ∞Ñ ÌëúÏãú (Î∂Ñ/ÏãúÍ∞Ñ/Ïùº Îã®ÏúÑÎ°ú ÏûêÎèô Î≥ÄÌôò)
‚Ä¢	Î™®Î∞îÏùº ÏµúÏ†ÅÌôîÎêú Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
‚Ä¢	Î∂ÄÎìúÎü¨Ïö¥ Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º Ï†ÑÌôò Ìö®Í≥º
üîß Ï∂îÍ∞Ä Íµ¨ÌòÑ ÏÇ¨Ìï≠
Ïã§Ï†ú ÏÑúÎπÑÏä§ÏóêÏÑúÎäî Îã§ÏùåÍ≥º Í∞ôÏùÄ Î∞±ÏóîÎìú APIÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§:
javascript
// ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
GET /api/notifications
Query: { page, limit, type, read }

// ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
PUT /api/notifications/:id/read

// Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
PUT /api/notifications/read-all

// ÏïåÎ¶º ÏÇ≠Ï†ú
DELETE /api/notifications/:id

// ÏïåÎ¶º ÏÑ§Ï†ï Ï°∞Ìöå/ÏàòÏ†ï
GET /api/notifications/settings
PUT /api/notifications/settings
üì≤ Ìë∏Ïãú ÏïåÎ¶º Íµ¨ÌòÑ
PWA Ìë∏Ïãú ÏïåÎ¶ºÏùÑ ÏúÑÌï¥ÏÑúÎäî Îã§ÏùåÏù¥ ÌïÑÏöîÌï©ÎãàÎã§:
1.	Service Worker Îì±Î°ù
2.	FCM (Firebase Cloud Messaging) ÏÑ§Ï†ï
3.	ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠
4.	Î∞±Í∑∏ÎùºÏö¥Îìú ÏïåÎ¶º Ï≤òÎ¶¨
Ïù¥ ÏïåÎ¶º ÌéòÏù¥ÏßÄÎäî ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ ÌÅ¨Í≤å Ìñ•ÏÉÅÏãúÌÇ¨ Í≤ÉÏûÖÎãàÎã§. ÏòàÏïΩ Í¥ÄÎ†® Ï§ëÏöî Ï†ïÎ≥¥Î•º ÎÜìÏπòÏßÄ ÏïäÍ≥†, ÌîÑÎ°úÎ™®ÏÖò Ï†ïÎ≥¥ÎèÑ Ìö®Í≥ºÏ†ÅÏúºÎ°ú Ï†ÑÎã¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.
‚ÄÉ
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥ÎìúÏôÄ ÏÉÅÏ†ê Îì±Î°ù ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌïòÍ≤†ÏäµÎãàÎã§. Îëê Í∞úÏùò Ï£ºÏöî ÌéòÏù¥ÏßÄÎ•º ÎßåÎì§Ïñ¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± - ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥Îìú
ÎåÄÌôîÌòï ÏïÑÌã∞Ìå©Ìä∏ 
Ïù¥Ï†ú ÏÉÅÏ†ê Îì±Î°ù ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌïòÍ≤†ÏäµÎãàÎã§.
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± - ÏÉÅÏ†ê Îì±Î°ù ÌéòÏù¥ÏßÄ
ÎåÄÌôîÌòï ÏïÑÌã∞Ìå©Ìä∏ 
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïùò ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥ÎìúÏôÄ ÏÉÅÏ†ê Îì±Î°ù ÌéòÏù¥ÏßÄÎ•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§.
üì± ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥Îìú (/owner)
Ï£ºÏöî Í∏∞Îä•:
1.	ÏòàÏïΩ Í¥ÄÎ¶¨ 
o	Ïã§ÏãúÍ∞Ñ ÏòàÏïΩ ÌòÑÌô© ÌôïÏù∏
o	ÏòàÏïΩ ÌôïÏ†ï/Í±∞Î∂Ä Í∏∞Îä•
o	ÏòàÏïΩ ÏÉÅÌÉúÎ≥Ñ ÌïÑÌÑ∞ÎßÅ (ÎåÄÍ∏∞/ÌôïÏ†ï/Í±∞Ï†à)
o	Í≥†Í∞ù Ï†ïÎ≥¥ Î∞è ÏöîÏ≤≠ÏÇ¨Ìï≠ ÌôïÏù∏
2.	Î©îÎâ¥ Í¥ÄÎ¶¨ 
o	Î©îÎâ¥ Ï∂îÍ∞Ä/ÏàòÏ†ï/ÏÇ≠Ï†ú
o	Î©îÎâ¥ ÎÖ∏Ï∂ú on/off ÌÜ†Í∏Ä
o	Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î©îÎâ¥ Í¥ÄÎ¶¨
o	Î©îÎâ¥ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
3.	ÏòÅÏóÖÏãúÍ∞Ñ ÏÑ§Ï†ï 
o	ÏöîÏùºÎ≥Ñ ÏòÅÏóÖÏãúÍ∞Ñ ÏÑ§Ï†ï
o	Ìú¥Î¨¥Ïùº ÏßÄÏ†ï Í∏∞Îä•
o	Ïã§ÏãúÍ∞Ñ ÏòÅÏóÖÏãúÍ∞Ñ Î≥ÄÍ≤Ω
4.	Îß§Ï∂ú ÌÜµÍ≥Ñ 
o	ÏùºÎ≥Ñ/ÏõîÎ≥Ñ Îß§Ï∂ú ÌòÑÌô©
o	ÏòàÏïΩ Í±¥Ïàò ÌÜµÍ≥Ñ
o	Ïù∏Í∏∞ Î©îÎâ¥ TOP 5
o	Îß§Ï∂ú Ï∂îÏù¥ Ï∞®Ìä∏
üìù ÏÉÅÏ†ê Îì±Î°ù ÌéòÏù¥ÏßÄ (/owner/register)
4Îã®Í≥Ñ Îì±Î°ù ÌîÑÎ°úÏÑ∏Ïä§:
1.	Í∏∞Î≥∏ Ï†ïÎ≥¥ (Step 1) 
o	ÏÉÅÏ†êÎ™Ö, Ïπ¥ÌÖåÍ≥†Î¶¨, ÏÜåÍ∞ú
o	ÏÇ¨ÏóÖÏûê Ï†ïÎ≥¥ (ÏÇ¨ÏóÖÏûêÎì±Î°ùÎ≤àÌò∏, ÎåÄÌëúÏûêÎ™Ö)
o	Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥
2.	ÏúÑÏπò Ï†ïÎ≥¥ (Step 2) 
o	Ï£ºÏÜå Í≤ÄÏÉâ Î∞è ÏûÖÎ†•
o	ÏßÄÎèÑÏóêÏÑú ÏúÑÏπò ÌôïÏù∏
o	ÏÉÅÏ†ê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (ÏµúÎåÄ 5Ïû•)
3.	ÏòÅÏóÖ Ï†ïÎ≥¥ (Step 3) 
o	ÏöîÏùºÎ≥Ñ ÏòÅÏóÖÏãúÍ∞Ñ ÏÑ§Ï†ï
o	Ìú¥Î¨¥Ïùº ÏßÄÏ†ï
4.	ÏÑúÎ•ò Îì±Î°ù (Step 4) 
o	Ï†ïÏÇ∞ Í≥ÑÏ¢å Ï†ïÎ≥¥
o	ÏÇ¨ÏóÖÏûêÎì±Î°ùÏ¶ù ÏóÖÎ°úÎìú
o	ÏµúÏ¢Ö Ï†úÏ∂ú
UI/UX ÌäπÏßï:
‚Ä¢	Îã®Í≥ÑÎ≥Ñ ÏßÑÌñâ ÌëúÏãú
‚Ä¢	Ïã§ÏãúÍ∞Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
‚Ä¢	Î™®Î∞îÏùº ÏµúÏ†ÅÌôî ÎîîÏûêÏù∏
‚Ä¢	ÏßÅÍ¥ÄÏ†ÅÏù∏ Ìèº Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
üîß Ï∂îÍ∞Ä Íµ¨ÌòÑ ÌïÑÏöîÏÇ¨Ìï≠
Î∞±ÏóîÎìú API:
javascript
// ÏÉÅÏ†êÏ£º ÎåÄÏãúÎ≥¥Îìú
GET /api/owner/dashboard
GET /api/owner/reservations
PUT /api/owner/reservations/:id/status
GET /api/owner/menu
POST /api/owner/menu
PUT /api/owner/menu/:id
DELETE /api/owner/menu/:id
PUT /api/owner/business-hours
GET /api/owner/statistics

// ÏÉÅÏ†ê Îì±Î°ù
POST /api/stores/register
POST /api/stores/upload/business-license
POST /api/stores/upload/images
GET /api/stores/registration-status
Ïù¥ Îëê ÌéòÏù¥ÏßÄÎäî ÏÉÅÏ†êÏ£ºÍ∞Ä Ìö®Ïú®Ï†ÅÏúºÎ°ú ÏÇ¨ÏóÖÏùÑ Ïö¥ÏòÅÌï† Ïàò ÏûàÎèÑÎ°ù ÌïÑÏöîÌïú Î™®Îì† Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.

‚ÄÉ
ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï± - Ïã§ÏãúÍ∞Ñ Í∏∞Îä• Î∞è SMS ÏïåÎ¶º ÏãúÏä§ÌÖú Íµ¨ÌòÑ
Ïã§ÏãúÍ∞Ñ Í∏∞Îä•Í≥º SMS ÏïåÎ¶º ÏãúÏä§ÌÖúÏùÑ Íµ¨ÌòÑÌïòÍ≤†ÏäµÎãàÎã§. Í∞Å Î™®ÎìàÏùÑ Í∞úÎ≥Ñ artifactÎ°ú Ï†úÍ≥µÌï©ÎãàÎã§.
1. Ïã§ÏãúÍ∞Ñ Í∏∞Îä• Íµ¨ÌòÑ (Server-Sent Events + Redis)
Ïã§ÏãúÍ∞Ñ Í∏∞Îä• - SSE ÏÑúÎ≤Ñ Íµ¨ÌòÑ
ÏΩîÎìú 
// backend/src/services/sse.service.ts import { Response } from 'express'; import Redis from 'ioredis'; import { EventEmitter } from 'events'; interface SSEClient { id: string; userId: string; response: Response; userType: 'customer' | 'stor
2. SMS ÏïåÎ¶º Ïó∞Îèô (ÏïåÎ¶¨Í≥† API)
SMS ÏïåÎ¶º ÏÑúÎπÑÏä§ - ÏïåÎ¶¨Í≥† API Ïó∞Îèô
ÏΩîÎìú 
// backend/src/services/sms.service.ts import axios from 'axios'; import FormData from 'form-data'; import { pool } from '../config/database'; interface SMSConfig { apiKey: string; userId: string; sender: string; testMode: boolean; } interf
3. ÌîÑÎ°†Ìä∏ÏóîÎìú Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º Ïó∞Îèô
ÌîÑÎ°†Ìä∏ÏóîÎìú SSE ÌõÖ Î∞è ÏïåÎ¶º Ïª¥Ìè¨ÎÑåÌä∏
ÏΩîÎìú 
// frontend/src/hooks/useSSE.ts import { useEffect, useRef, useState, useCallback } from 'react'; import { useAuthStore } from '@/stores/auth.store'; import { toast } from 'sonner'; interface SSEMessage { id?: string; event?: string; data: any
4. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
ÏïåÎ¶º ÏãúÏä§ÌÖú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
ÏΩîÎìú 
-- SMS Î°úÍ∑∏ ÌÖåÏù¥Î∏î CREATE TABLE IF NOT EXISTS sms_logs ( id SERIAL PRIMARY KEY, receiver VARCHAR(20) NOT NULL, message TEXT NOT NULL, title VARCHAR(100), status VARCHAR(20) NOT NULL, -- success, failed, error, test response TEXT, 
5. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï ÌååÏùº
ÏΩîÎìú 
# .env.example # Redis ÏÑ§Ï†ï REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=your_redis_password # ÏïåÎ¶¨Í≥† SMS API ÏÑ§Ï†ï ALIGO_API_KEY=your_aligo_api_key ALIGO_USER_ID=your_aligo_user_id ALIGO_SENDER=your_sender_number # Î∞úÏã†Î≤àÌò∏ (Ïòà: 0631234567) # ÏÜîÎùºÌîº SMS 
Íµ¨ÌòÑ ÏôÑÎ£å ÏöîÏïΩ
1. Ïã§ÏãúÍ∞Ñ Í∏∞Îä• (SSE)
‚Ä¢	‚úÖ Server-Sent EventsÎ•º ÌÜµÌïú Ïã§ÏãúÍ∞Ñ ÌÜµÏã†
‚Ä¢	‚úÖ Redis Pub/SubÏùÑ ÌÜµÌïú ÏÑúÎ≤Ñ Í∞Ñ Î©îÏãúÏßÄ Ï†ÑÎã¨
‚Ä¢	‚úÖ ÏûêÎèô Ïû¨Ïó∞Í≤∞ Î∞è ÎØ∏ÏàòÏã† Î©îÏãúÏßÄ Ï≤òÎ¶¨
‚Ä¢	‚úÖ ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖÎ≥Ñ ÌÉÄÍ≤üÌåÖ (Í≥†Í∞ù/ÏÉÅÏ†êÏ£º/Í¥ÄÎ¶¨Ïûê)
2. SMS ÏïåÎ¶º ÏãúÏä§ÌÖú
‚Ä¢	‚úÖ ÏïåÎ¶¨Í≥† API Ïó∞Îèô (ÏÜîÎùºÌîºÎ°ú ÏâΩÍ≤å Ï†ÑÌôò Í∞ÄÎä•)
‚Ä¢	‚úÖ ÌÖúÌîåÎ¶ø Í∏∞Î∞ò Î©îÏãúÏßÄ Í¥ÄÎ¶¨
‚Ä¢	‚úÖ ÎåÄÎüâ Î∞úÏÜ° ÏßÄÏõê
‚Ä¢	‚úÖ ÏòàÏïΩ Î¶¨ÎßàÏù∏Îçî ÏûêÎèô Î∞úÏÜ°
‚Ä¢	‚úÖ SMS Î∞úÏÜ° Î°úÍ∑∏ Î∞è ÌÜµÍ≥Ñ
3. ÌîÑÎ°†Ìä∏ÏóîÎìú ÌÜµÌï©
‚Ä¢	‚úÖ React HookÏùÑ ÌÜµÌïú SSE Ïó∞Í≤∞ Í¥ÄÎ¶¨
‚Ä¢	‚úÖ Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º UI Ïª¥Ìè¨ÎÑåÌä∏
‚Ä¢	‚úÖ Î∏åÎùºÏö∞Ï†Ä Ìë∏Ïãú ÏïåÎ¶º ÏßÄÏõê
‚Ä¢	‚úÖ Toast ÏïåÎ¶º ÏãúÏä§ÌÖú
4. Ï∂îÍ∞Ä Í∏∞Îä•
‚Ä¢	‚úÖ ÏïåÎ¶º ÏÑ§Ï†ï Í∞úÏù∏Ìôî
‚Ä¢	‚úÖ ÏãúÏä§ÌÖú Í≥µÏßÄÏÇ¨Ìï≠
‚Ä¢	‚úÖ ÏïåÎ¶º Ïù¥Î†• Í¥ÄÎ¶¨
‚Ä¢	‚úÖ Ïò§ÌîÑÎùºÏù∏ ÏÇ¨Ïö©ÏûêÎ•º ÏúÑÌïú Î©îÏãúÏßÄ ÌÅêÏûâ
ÏÇ¨Ïö© Î∞©Î≤ï
1. Redis ÏÑ§Ïπò Î∞è Ïã§Ìñâ
bash
# Docker ÏÇ¨Ïö© Ïãú
docker run -d --name redis -p 6379:6379 redis:7-alpine

# ÎòêÎäî Î°úÏª¨ ÏÑ§Ïπò
brew install redis  # macOS
sudo apt-get install redis-server  # Ubuntu
2. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
bash
cp .env.example .env
# .env ÌååÏùºÏóêÏÑú ÏïåÎ¶¨Í≥† API ÌÇ§ÏôÄ Redis Ï†ïÎ≥¥ ÏûÖÎ†•
3. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
bash
psql -U your_user -d jinan_market < notification-migrations.sql
4. ÏÑúÎ≤Ñ ÏãúÏûë
typescript
// backend/src/index.tsÏóê Ï∂îÍ∞Ä
import sseRoutes from './routes/sse.routes';

app.use('/api/sse', sseRoutes);

// ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ïãú Ï†ïÎ¶¨
process.on('SIGTERM', async () => {
  await sseService.cleanup();
  smsScheduler.stop();
});
5. ÌîÑÎ°†Ìä∏ÏóîÎìú Ï†ÅÏö©
tsx
// Î†àÏù¥ÏïÑ
Ïû¨ÏãúÎèÑ
Ìòï
Í≥ÑÏÜç
Ìé∏Ïßë
ÏÇ¨Ïö© Î∞©Î≤ï (Í≥ÑÏÜç)
5. ÌîÑÎ°†Ìä∏ÏóîÎìú Ï†ÅÏö©
Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º ÏãúÏä§ÌÖú ÌÜµÌï© Í∞ÄÏù¥Îìú
ÏΩîÎìú 
// === ÌîÑÎ°†Ìä∏ÏóîÎìú ÌÜµÌï© === // 1. Î†àÏù¥ÏïÑÏõÉÏóê NotificationProvider Ï∂îÍ∞Ä // app/layout.tsx import { NotificationProvider } from '@/providers/NotificationProvider'; import { NotificationBell } from '@/components/NotificationBell'; export default function RootLayout(
ÌÖåÏä§Ìä∏ Î∞è ÎîîÎ≤ÑÍπÖ
Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ Í∞ÄÏù¥Îìú
ÏΩîÎìú 
// === Îã®ÏúÑ ÌÖåÏä§Ìä∏ === // backend/src/__tests__/services/sms.service.test.ts import { smsService } from '../../services/sms.service'; describe('SMSService', () => { beforeEach(() => { // ÌÖåÏä§Ìä∏ Î™®Îìú ÏÑ§Ï†ï process.env.NODE_ENV = 'test'; }); descri
Íµ¨ÌòÑ ÏôÑÎ£å ÏöîÏïΩ
‚úÖ ÏôÑÏÑ±Îêú Í∏∞Îä•Îì§:
1.	Ïã§ÏãúÍ∞Ñ Í∏∞Îä• (SSE) 
o	Server-Sent Events Í∏∞Î∞ò Ïã§ÏãúÍ∞Ñ ÌÜµÏã†
o	Redis Pub/SubÏùÑ ÌÜµÌïú ÏÑúÎ≤Ñ Í∞Ñ Î©îÏãúÏßÄ Ï†ÑÎã¨
o	ÏûêÎèô Ïû¨Ïó∞Í≤∞ Î∞è Ïò§ÌîÑÎùºÏù∏ Î©îÏãúÏßÄ ÌÅêÏûâ
o	ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖÎ≥Ñ ÌÉÄÍ≤üÌåÖ (Í≥†Í∞ù/ÏÉÅÏ†êÏ£º/Í¥ÄÎ¶¨Ïûê)
2.	SMS ÏïåÎ¶º ÏãúÏä§ÌÖú 
o	ÏïåÎ¶¨Í≥† API ÏôÑÎ≤Ω Ïó∞Îèô
o	ÌÖúÌîåÎ¶ø Í∏∞Î∞ò Î©îÏãúÏßÄ Í¥ÄÎ¶¨
o	ÎåÄÎüâ Î∞úÏÜ° ÏßÄÏõê (ÏµúÎåÄ 1000Í±¥/Ìöå)
o	ÏòàÏïΩ Î¶¨ÎßàÏù∏Îçî ÏûêÎèô Î∞úÏÜ° (Cron)
o	ÏÉÅÏÑ∏Ìïú Î∞úÏÜ° Î°úÍ∑∏ Î∞è ÌÜµÍ≥Ñ
3.	ÌîÑÎ°†Ìä∏ÏóîÎìú ÌÜµÌï© 
o	React Hook (useSSE)ÏúºÎ°ú Í∞ÑÌé∏Ìïú Ïó∞Îèô
o	Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º UI (NotificationBell)
o	Î∏åÎùºÏö∞Ï†Ä Ìë∏Ïãú ÏïåÎ¶º ÏßÄÏõê
o	Toast ÏïåÎ¶º ÏãúÏä§ÌÖú (sonner)
4.	Ï∂îÍ∞Ä Í∏∞Îä• 
o	Í∞úÏù∏Î≥Ñ ÏïåÎ¶º ÏÑ§Ï†ï
o	ÏãúÏä§ÌÖú Í≥µÏßÄÏÇ¨Ìï≠
o	ÏïåÎ¶º Ïù¥Î†• Í¥ÄÎ¶¨
o	ÎîîÎ≤ÑÍ∑∏ ÎåÄÏãúÎ≥¥Îìú
üöÄ Ï¶âÏãú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÉÅÌÉú:
bash
# 1. ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
npm install ioredis cron axios form-data uuid sonner framer-motion

# 2. Redis Ïã§Ìñâ
docker run -d -p 6379:6379 redis:7-alpine

# 3. ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï (.env)
ALIGO_API_KEY=your_key
ALIGO_USER_ID=your_id
ALIGO_SENDER=01012345678

# 4. DB ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
psql -U postgres -d jinan_market < notification-migrations.sql

# 5. ÏÑúÎ≤Ñ ÏãúÏûë
npm run dev
üì± Ï£ºÏöî ÏÇ¨Ïö© ÏãúÎÇòÎ¶¨Ïò§:
1.	Í≥†Í∞ùÏù¥ ÏòàÏïΩ Ïã†Ï≤≠ ‚Üí ÏÉÅÏ†êÏ£ºÏóêÍ≤å Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º + SMS
2.	ÏÉÅÏ†êÏ£ºÍ∞Ä ÏòàÏïΩ ÌôïÏ†ï ‚Üí Í≥†Í∞ùÏóêÍ≤å Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º + SMS
3.	ÏòàÏïΩ 1ÏãúÍ∞Ñ Ï†Ñ ‚Üí Í≥†Í∞ùÏóêÍ≤å Î¶¨ÎßàÏù∏Îçî SMS ÏûêÎèô Î∞úÏÜ°
4.	Í¥ÄÎ¶¨Ïûê Í≥µÏßÄÏÇ¨Ìï≠ ‚Üí Î™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º
Ïù¥Ï†ú ÏßÑÏïàÍµ∞ Ïû•ÌÑ∞ Ïï±Ïóê ÏôÑÎ≤ΩÌïú Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º ÏãúÏä§ÌÖúÏù¥ Íµ¨Ï∂ïÎêòÏóàÏäµÎãàÎã§! Îã§Ïùå Îã®Í≥ÑÎ°ú Ïñ¥Îñ§ Î™®ÎìàÏùÑ Íµ¨ÌòÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?

